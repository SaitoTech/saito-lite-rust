#!/bin/bash

echo "Builing Lite Client ($1 $2)"
echo ""

echo "Consolidaging CSS files"
echo ""

for d in mods/*/ ;
do
  if [ -d "$d"/web/css ]; then
    if [ "$1" == "dev" ] | [ "$2" == "dev" ]; then
      echo "link module css in $d"
      find "$d"web/css/ -type f -name '*.css' 2>/dev/null | sed 's/mods.*web\///' | sed 's/^/@import url(".\//' | sed 's/$/");/' > "$d"web/style.css 
    else
      echo "compile module css in $d"
      echo "/**/" > "$d"web/style.css
      echo "/* THIS FILE AUTOGENERATED FROM CSS in ./web/css/ */ " >> "$d"web/style.css
      echo "/**/" >> "$d"web/style.css
      find "$d"web/css -type f -name '*.css'  -exec cat {} \; >> "$d"web/style.css
    fi
  fi
done

echo ""

if [ "$1" == "dev" ] | [ "$2" == "dev" ]; then
  echo "linking game-*.css files into game.css"
  find ./web/saito/ -type f -name 'game-*.css' | sed 's/\.\/web/@import url("/' | sed 's/$/");/' > ./web/saito/game.css
  echo "linking saito-*.css files into saito.css"
  find ./web/saito/ -type f -name 'saito-*.css' | sed 's/\.\/web/@import url("/' | sed 's/$/");/' > ./web/saito/saito.css
  echo "@import url(\"/saito/css-imports/xclose.css\");" >> ./web/saito/saito.css;   
else
  echo "compiling game-*.css files into game.css"
  echo "/**/" > ./web/saito/game.css
  echo "/* THIS FILE AUTOGENERATED FROM CSS in saito/css-includes/ / */ " >> ./web/saito/game.css
  echo "/**/" >> ./web/saito/game.css
  find ./web/saito/ -type f -name 'game-*.css' -exec cat {} \; >> ./web/saito/game.css
  echo "compiling saito-*.css files into saito.css"
  echo "/**/" > ./web/saito/saito.css
  echo "/* THIS FILE AUTOGENERATED FROM CSS in saito/css-includes/ / */ " >> ./web/saito/saito.css
  echo "/**/" >> ./web/saito/saito.css
  find ./web/saito/ -type f -name 'saito-*.css' -exec cat {} \; >> ./web/saito/saito.css
  cat ./web/saito/css-imports/xclose.css >> ./web/saito/saito.css
fi

echo ""
echo "CSS complete"
echo ""

function post_compile {

  cp ./lib/saito/boot.js ./web/saito/saito2.js
  cat ./web/saito/saito.js >> ./web/saito/saito2.js
  mv -f ./web/saito/saito2.js ./web/saito/saito.js
  echo -e "\ndone!"
}

function reset_bundler {

echo "Resetting Saito to Default Modules!"
echo ""

  rm -rf ./bundler
  if [ ! -d "./bundler" ]; then

    mkdir -p bundler/default/mods
    mkdir -p data/blocks
    cp -rf ./lib bundler/default/lib
    rm -f bundler/default/lib/saito/*.spec.js
    rm -f bundler/default/lib/saito/core/*.spec.js
    cp -rf ./config bundler/default/config
    cp -rf ./apps bundler/default/apps

    copy_lite_mods_to_bundler_directory

echo ""
echo "Compiling Lite-Client JS..."

    rm -rf bundler/default/mods/appstore/bundler/dist

    for md in bundler/default/mods/* ; do
      rm -rf "$md/web"
      rm -rf "$md/sql"
      rm -rf "$md/www"
      rm -rf "$md/src"
      rm -rf "$md/docs"
      rm -rf "$md/compile"
      rm -rf "$md/DESCRIPTION.txt"
      rm -rf "$md/BUGS.txt"
      rm -rf "$md/README.txt"
      rm -rf "$md/*.md"
      rm -rf "$md/README.md"
      rm -rf "$md/install.sh"
      rm -rf "$md/license"
    done
  fi

}

function reset_nonpersistent {

  mkdir -p data/blocks

  # ensure deleted
  rm -f ./web/saito/saito.js

  # backup dbs before deleting anything
  mkdir -p ./data/backup
  cp -v ./data/*.sq3 ./data/backup/

  # we explicitly don't delete registry/balance databases
  rm -f ./data/appstore.sq3
  rm -f ./data/arcade.sq3
  rm -f ./data/observer.sq3
  rm -f ./data/records.sq3
  rm -f ./data/archive.sq3
  rm -f ./data/timeclock.sq3
  rm -f ./data/earlybirds.sq3
  rm -f ./data/chat.sq3
  rm -f ./data/escrow.sq3
  rm -f ./data/log.txt
  rm -f ./data/*.sq3-journal
  find ./data/blocks/ -name '*.sai' | xargs rm -r
  rm -f ./data/shashmaps/*.smap
  rm -f ./data/blocks/*.zip
  rm -f ./data/blocks/*.segadd
  rm -f ./data/tmp/*.sai
  rm -f ./data/tmp/*.zip
  rm -f ./config/options

  rm -rf ./mods/appstore/mods
  mkdir ./mods/appstore/mods
  #
  # do not delete compiled software
  #
  # rm -rf ./mods/appstore/bundler/dist/

  rm -f ./mods/registry/web/addresses.txt
  rm -f ./mods/appstore/mods/*
  rm -rf ./mods/appstore/bundler/mods/*
  rm -rf ./mods/appstore/bundler/dist/*
  rm -f ./mods/appstore/bundler/*.js
  rm -f ./mods/appstore/bundler/*.json
  rm -f ./logs/*

  #let the system know that users pre-existed a reset.
  if [ -f ./data/rewards.sq3 ]; then
  echo "update users set latest_tx = -1;" | sqlite3 ./data/rewards.sq3
  fi

  if [ ! -f ./config/modules.config.js ]; then
    cp ./config/modules.default.js ./config/modules.config.js
  fi

  if [ -f config/options.conf ]; then
    cp config/options.conf config/options
  fi
}

function reset_persistent {

  # backup dbs before deleting anything
  mkdir -p ./data/backup
  cp -v ./data/*.sq3 ./data/backup/

#  rm -f ./data/post.sq3
#  rm -f ./data/arcade.sq3
  rm -f ./data/registry.sq3
  rm -f ./data/league.sq3
  rm -f ./data/tutorial.sq3
  rm -f ./web/client.options
  mkdir -p data/blocks

}

function copy_lite_mods_to_bundler_directory {


  PMOD=0
  declare -a ARRAY_OF_MODS

  input="./config/modules.config.js"
  while IFS= read -r line
  do
    if [[ $PMOD == 1 ]]; then
      if ! [[ $line == *"//"* ]]; then
        #SUBSTRING=$(echo $line| cut -d".*/" -f 2)
        #SUBSTRING2=$(echo $SUBSTRING| cut -d".js" -f 1)
        SUBSTRING=$(echo $line | sed 's/.*\///')
        SUBSTRING2=$(echo $SUBSTRING | sed 's/.js.*//')
        if ! [[ $SUBSTRING2 == *"]"* ]]; then
          if ! [[ $SUBSTRING2 == *"}"* ]]; then
            ARRAY_OF_MODS+=($SUBSTRING2)
          fi
        fi
      fi
    fi
    if [[ $line == *"lite"* ]]; then
      PMOD=1
    fi
  done < $input

  #printf '%s\n' "${ARRAY_OF_MODS[@]}"

  for i in "${ARRAY_OF_MODS[@]}"; do
    echo "installing mod for lite-client bundling: $i";
    cp -rf ./mods/$i bundler/default/mods/$i
  done

  rm -f ./bundler/default/mods/appstore/mods/*
  rm -f ./bundler/default/mods/appstore/bundler/*
  rm -f ./bundler/default/mods/appstore/dist/*

}



if [ "$1" == "init" ]; then


  if [ -f config/modules.config.js ]; then

    echo "";
    echo "It looks like you have already installed Saito. If you are "
    echo "trying to change the modules that are installed on your "
    echo "machine you can edit the file: "
    echo "";
    echo "  config/modules.config.js";
    echo "";
    echo "And run the following command: ";
    echo "";
    echo "  > npm run compile";
    echo "";
    echo "Continuing with this installation will delete existing data,"
    echo "reset your wallet and resync the blockchain. Are you sure "
    echo "you wish to continue? (yes/no)"

    while true; do
      read -p "> " yn
      case $yn in
        yes* ) cp config/modules.default.js config/modules.config.js; break;;
        no* ) exit;;
        * ) echo 'Please answer "yes" or "no".';;
      esac
    done


  elif [ -f config/modules.default.js ]; then

    echo "";
    echo "Installing and compiling Saito with default modules..."
    echo "";

  fi


  if [ -f config/saito.io.conf ]; then

    while true; do

      echo ""
      echo "You can join the Saito Network and participate in development"
      echo "of the public chain. Or you can setup a local node for the"
      echo "easier development and testing of applications."
      echo "";
      echo "Join saito.io (saito) or local install (local): ";
      read -p "> " yn
      case $yn in
        saito* ) cp config/saito.io.conf config/options; break;;
        local* ) break;;
        * ) echo 'Please answer "saito" or "local".';;
      esac
    done

  fi


fi


if [ "$1" == "nuke" ] || [ "$1" == "init" ]; then

  echo ""
  echo ""
  echo "     _.-^^---....,,--        "
  echo " _--                  --_    "
  echo " <                        >) "
  echo " |                         | "
  echo "  \._                   _./  "
  echo "     '''--. . , ; .--'''     "
  echo "          | |   |            "
  echo "       .-=||  | |=-.         "
  echo "        -=#$%&%$/=-'         "
  echo "          | ;  :|            "
  echo "      .,-#%&$/#@%#&#~,         "
  echo "  -------------------------  "
  echo "  NUKING YOUR SAITO INSTALL  "
  echo "  -------------------------  "
  echo "  (resetting configuration)  "
  echo ""
  echo ""

  rm -rf built/*
  tsc
  reset_nonpersistent
  reset_persistent
  reset_bundler
  time node webpack/webpack.config.cjs $2 $3

  post_compile

fi

if [ "$1" == "reset" ] || [ "$1" == "dev" ]; then

  echo ""
  echo ""
  echo "  --------------------------  "
  echo "  RESETTING ALL BUT CORE DATA "
  echo "  --------------------------  "
  echo "   (resetting blockchain)  "
  echo ""
  echo ""

  tsc
  reset_nonpersistent
  reset_bundler

  time node webpack/webpack.config.cjs $2 $3

  post_compile

fi

if [ "$1" == "recompile" ]; then

  echo ""
  echo "  -------------------------  "
  echo "   RE-COMPILING JAVASCRIPT   "
  echo "  -------------------------  "
  echo "  (resetting configuration)  "
  echo ""
  echo ""


  # making sure we have some modules defined.
  if [ ! -f ./config/modules.config.js ]; then
    cp ./config/modules.default.js ./config/modules.config.js
  fi

  reset_bundler

  time node webpack/webpack.config.cjs $2 $3

  post_compile

fi




