import { Saito } from '../../apps/core';
import Peer from './peer';
import Transaction from './transaction';
import path from 'path';
import fs from 'fs';
import { fromBase58 } from 'saito-js/lib/util';

const DYN_MOD=
	"LyohIEZvciBsaWNlbnNlIGluZm9ybWF0aW9uIHBsZWFzZSBzZWUgZHluLm1vZHVsZS5qcy5MSUNFTlNFLnR4dCAqLwooKCk9Pnt2YXIgZT17MjIyOihlLHQsbik9PntmdW5jdGlvbiByKGUpe3JldHVybiByPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSxyKGUpfWZ1bmN0aW9uIG8oZSx0KXsobnVsbD09dHx8dD5lLmxlbmd0aCkmJih0PWUubGVuZ3RoKTtmb3IodmFyIG49MCxyPW5ldyBBcnJheSh0KTtuPHQ7bisrKXJbbl09ZVtuXTtyZXR1cm4gcn1mdW5jdGlvbiBpKCl7InVzZSBzdHJpY3QiO2k9ZnVuY3Rpb24oKXtyZXR1cm4gdH07dmFyIGUsdD17fSxuPU9iamVjdC5wcm90b3R5cGUsbz1uLmhhc093blByb3BlcnR5LHM9T2JqZWN0LmRlZmluZVByb3BlcnR5fHxmdW5jdGlvbihlLHQsbil7ZVt0XT1uLnZhbHVlfSxhPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LGM9YS5pdGVyYXRvcnx8IkBAaXRlcmF0b3IiLHU9YS5hc3luY0l0ZXJhdG9yfHwiQEBhc3luY0l0ZXJhdG9yIixsPWEudG9TdHJpbmdUYWd8fCJAQHRvU3RyaW5nVGFnIjtmdW5jdGlvbiBmKGUsdCxuKXtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pLGVbdF19dHJ5e2Yoe30sIiIpfWNhdGNoKGUpe2Y9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBlW3RdPW59fWZ1bmN0aW9uIGgoZSx0LG4scil7dmFyIG89dCYmdC5wcm90b3R5cGUgaW5zdGFuY2VvZiBiP3Q6YixpPU9iamVjdC5jcmVhdGUoby5wcm90b3R5cGUpLGE9bmV3IEwocnx8W10pO3JldHVybiBzKGksIl9pbnZva2UiLHt2YWx1ZTpqKGUsbixhKX0pLGl9ZnVuY3Rpb24gcChlLHQsbil7dHJ5e3JldHVybnt0eXBlOiJub3JtYWwiLGFyZzplLmNhbGwodCxuKX19Y2F0Y2goZSl7cmV0dXJue3R5cGU6InRocm93Iixhcmc6ZX19fXQud3JhcD1oO3ZhciBkPSJzdXNwZW5kZWRTdGFydCIseT0ic3VzcGVuZGVkWWllbGQiLHY9ImV4ZWN1dGluZyIsZz0iY29tcGxldGVkIixtPXt9O2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gdygpe31mdW5jdGlvbiBTKCl7fXZhciBrPXt9O2YoayxjLChmdW5jdGlvbigpe3JldHVybiB0aGlzfSkpO3ZhciB4PU9iamVjdC5nZXRQcm90b3R5cGVPZixFPXgmJngoeChQKFtdKSkpO0UmJkUhPT1uJiZvLmNhbGwoRSxjKSYmKGs9RSk7dmFyIE89Uy5wcm90b3R5cGU9Yi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShrKTtmdW5jdGlvbiBBKGUpe1sibmV4dCIsInRocm93IiwicmV0dXJuIl0uZm9yRWFjaCgoZnVuY3Rpb24odCl7ZihlLHQsKGZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9pbnZva2UodCxlKX0pKX0pKX1mdW5jdGlvbiBfKGUsdCl7ZnVuY3Rpb24gbihpLHMsYSxjKXt2YXIgdT1wKGVbaV0sZSxzKTtpZigidGhyb3ciIT09dS50eXBlKXt2YXIgbD11LmFyZyxmPWwudmFsdWU7cmV0dXJuIGYmJiJvYmplY3QiPT1yKGYpJiZvLmNhbGwoZiwiX19hd2FpdCIpP3QucmVzb2x2ZShmLl9fYXdhaXQpLnRoZW4oKGZ1bmN0aW9uKGUpe24oIm5leHQiLGUsYSxjKX0pLChmdW5jdGlvbihlKXtuKCJ0aHJvdyIsZSxhLGMpfSkpOnQucmVzb2x2ZShmKS50aGVuKChmdW5jdGlvbihlKXtsLnZhbHVlPWUsYShsKX0pLChmdW5jdGlvbihlKXtyZXR1cm4gbigidGhyb3ciLGUsYSxjKX0pKX1jKHUuYXJnKX12YXIgaTtzKHRoaXMsIl9pbnZva2UiLHt2YWx1ZTpmdW5jdGlvbihlLHIpe2Z1bmN0aW9uIG8oKXtyZXR1cm4gbmV3IHQoKGZ1bmN0aW9uKHQsbyl7bihlLHIsdCxvKX0pKX1yZXR1cm4gaT1pP2kudGhlbihvLG8pOm8oKX19KX1mdW5jdGlvbiBqKHQsbixyKXt2YXIgbz1kO3JldHVybiBmdW5jdGlvbihpLHMpe2lmKG89PT12KXRocm93IG5ldyBFcnJvcigiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZyIpO2lmKG89PT1nKXtpZigidGhyb3ciPT09aSl0aHJvdyBzO3JldHVybnt2YWx1ZTplLGRvbmU6ITB9fWZvcihyLm1ldGhvZD1pLHIuYXJnPXM7Oyl7dmFyIGE9ci5kZWxlZ2F0ZTtpZihhKXt2YXIgYz1OKGEscik7aWYoYyl7aWYoYz09PW0pY29udGludWU7cmV0dXJuIGN9fWlmKCJuZXh0Ij09PXIubWV0aG9kKXIuc2VudD1yLl9zZW50PXIuYXJnO2Vsc2UgaWYoInRocm93Ij09PXIubWV0aG9kKXtpZihvPT09ZCl0aHJvdyBvPWcsci5hcmc7ci5kaXNwYXRjaEV4Y2VwdGlvbihyLmFyZyl9ZWxzZSJyZXR1cm4iPT09ci5tZXRob2QmJnIuYWJydXB0KCJyZXR1cm4iLHIuYXJnKTtvPXY7dmFyIHU9cCh0LG4scik7aWYoIm5vcm1hbCI9PT11LnR5cGUpe2lmKG89ci5kb25lP2c6eSx1LmFyZz09PW0pY29udGludWU7cmV0dXJue3ZhbHVlOnUuYXJnLGRvbmU6ci5kb25lfX0idGhyb3ciPT09dS50eXBlJiYobz1nLHIubWV0aG9kPSJ0aHJvdyIsci5hcmc9dS5hcmcpfX19ZnVuY3Rpb24gTih0LG4pe3ZhciByPW4ubWV0aG9kLG89dC5pdGVyYXRvcltyXTtpZihvPT09ZSlyZXR1cm4gbi5kZWxlZ2F0ZT1udWxsLCJ0aHJvdyI9PT1yJiZ0Lml0ZXJhdG9yLnJldHVybiYmKG4ubWV0aG9kPSJyZXR1cm4iLG4uYXJnPWUsTih0LG4pLCJ0aHJvdyI9PT1uLm1ldGhvZCl8fCJyZXR1cm4iIT09ciYmKG4ubWV0aG9kPSJ0aHJvdyIsbi5hcmc9bmV3IFR5cGVFcnJvcigiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAnIityKyInIG1ldGhvZCIpKSxtO3ZhciBpPXAobyx0Lml0ZXJhdG9yLG4uYXJnKTtpZigidGhyb3ciPT09aS50eXBlKXJldHVybiBuLm1ldGhvZD0idGhyb3ciLG4uYXJnPWkuYXJnLG4uZGVsZWdhdGU9bnVsbCxtO3ZhciBzPWkuYXJnO3JldHVybiBzP3MuZG9uZT8oblt0LnJlc3VsdE5hbWVdPXMudmFsdWUsbi5uZXh0PXQubmV4dExvYywicmV0dXJuIiE9PW4ubWV0aG9kJiYobi5tZXRob2Q9Im5leHQiLG4uYXJnPWUpLG4uZGVsZWdhdGU9bnVsbCxtKTpzOihuLm1ldGhvZD0idGhyb3ciLG4uYXJnPW5ldyBUeXBlRXJyb3IoIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0Iiksbi5kZWxlZ2F0ZT1udWxsLG0pfWZ1bmN0aW9uIFQoZSl7dmFyIHQ9e3RyeUxvYzplWzBdfTsxIGluIGUmJih0LmNhdGNoTG9jPWVbMV0pLDIgaW4gZSYmKHQuZmluYWxseUxvYz1lWzJdLHQuYWZ0ZXJMb2M9ZVszXSksdGhpcy50cnlFbnRyaWVzLnB1c2godCl9ZnVuY3Rpb24gQyhlKXt2YXIgdD1lLmNvbXBsZXRpb258fHt9O3QudHlwZT0ibm9ybWFsIixkZWxldGUgdC5hcmcsZS5jb21wbGV0aW9uPXR9ZnVuY3Rpb24gTChlKXt0aGlzLnRyeUVudHJpZXM9W3t0cnlMb2M6InJvb3QifV0sZS5mb3JFYWNoKFQsdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24gUCh0KXtpZih0fHwiIj09PXQpe3ZhciBuPXRbY107aWYobilyZXR1cm4gbi5jYWxsKHQpO2lmKCJmdW5jdGlvbiI9PXR5cGVvZiB0Lm5leHQpcmV0dXJuIHQ7aWYoIWlzTmFOKHQubGVuZ3RoKSl7dmFyIGk9LTEscz1mdW5jdGlvbiBuKCl7Zm9yKDsrK2k8dC5sZW5ndGg7KWlmKG8uY2FsbCh0LGkpKXJldHVybiBuLnZhbHVlPXRbaV0sbi5kb25lPSExLG47cmV0dXJuIG4udmFsdWU9ZSxuLmRvbmU9ITAsbn07cmV0dXJuIHMubmV4dD1zfX10aHJvdyBuZXcgVHlwZUVycm9yKHIodCkrIiBpcyBub3QgaXRlcmFibGUiKX1yZXR1cm4gdy5wcm90b3R5cGU9UyxzKE8sImNvbnN0cnVjdG9yIix7dmFsdWU6Uyxjb25maWd1cmFibGU6ITB9KSxzKFMsImNvbnN0cnVjdG9yIix7dmFsdWU6dyxjb25maWd1cmFibGU6ITB9KSx3LmRpc3BsYXlOYW1lPWYoUyxsLCJHZW5lcmF0b3JGdW5jdGlvbiIpLHQuaXNHZW5lcmF0b3JGdW5jdGlvbj1mdW5jdGlvbihlKXt2YXIgdD0iZnVuY3Rpb24iPT10eXBlb2YgZSYmZS5jb25zdHJ1Y3RvcjtyZXR1cm4hIXQmJih0PT09d3x8IkdlbmVyYXRvckZ1bmN0aW9uIj09PSh0LmRpc3BsYXlOYW1lfHx0Lm5hbWUpKX0sdC5tYXJrPWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsUyk6KGUuX19wcm90b19fPVMsZihlLGwsIkdlbmVyYXRvckZ1bmN0aW9uIikpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTyksZX0sdC5hd3JhcD1mdW5jdGlvbihlKXtyZXR1cm57X19hd2FpdDplfX0sQShfLnByb3RvdHlwZSksZihfLnByb3RvdHlwZSx1LChmdW5jdGlvbigpe3JldHVybiB0aGlzfSkpLHQuQXN5bmNJdGVyYXRvcj1fLHQuYXN5bmM9ZnVuY3Rpb24oZSxuLHIsbyxpKXt2b2lkIDA9PT1pJiYoaT1Qcm9taXNlKTt2YXIgcz1uZXcgXyhoKGUsbixyLG8pLGkpO3JldHVybiB0LmlzR2VuZXJhdG9yRnVuY3Rpb24obik/czpzLm5leHQoKS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gZS5kb25lP2UudmFsdWU6cy5uZXh0KCl9KSl9LEEoTyksZihPLGwsIkdlbmVyYXRvciIpLGYoTyxjLChmdW5jdGlvbigpe3JldHVybiB0aGlzfSkpLGYoTywidG9TdHJpbmciLChmdW5jdGlvbigpe3JldHVybiJbb2JqZWN0IEdlbmVyYXRvcl0ifSkpLHQua2V5cz1mdW5jdGlvbihlKXt2YXIgdD1PYmplY3QoZSksbj1bXTtmb3IodmFyIHIgaW4gdCluLnB1c2gocik7cmV0dXJuIG4ucmV2ZXJzZSgpLGZ1bmN0aW9uIGUoKXtmb3IoO24ubGVuZ3RoOyl7dmFyIHI9bi5wb3AoKTtpZihyIGluIHQpcmV0dXJuIGUudmFsdWU9cixlLmRvbmU9ITEsZX1yZXR1cm4gZS5kb25lPSEwLGV9fSx0LnZhbHVlcz1QLEwucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpMLHJlc2V0OmZ1bmN0aW9uKHQpe2lmKHRoaXMucHJldj0wLHRoaXMubmV4dD0wLHRoaXMuc2VudD10aGlzLl9zZW50PWUsdGhpcy5kb25lPSExLHRoaXMuZGVsZWdhdGU9bnVsbCx0aGlzLm1ldGhvZD0ibmV4dCIsdGhpcy5hcmc9ZSx0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChDKSwhdClmb3IodmFyIG4gaW4gdGhpcykidCI9PT1uLmNoYXJBdCgwKSYmby5jYWxsKHRoaXMsbikmJiFpc05hTigrbi5zbGljZSgxKSkmJih0aGlzW25dPWUpfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5kb25lPSEwO3ZhciBlPXRoaXMudHJ5RW50cmllc1swXS5jb21wbGV0aW9uO2lmKCJ0aHJvdyI9PT1lLnR5cGUpdGhyb3cgZS5hcmc7cmV0dXJuIHRoaXMucnZhbH0sZGlzcGF0Y2hFeGNlcHRpb246ZnVuY3Rpb24odCl7aWYodGhpcy5kb25lKXRocm93IHQ7dmFyIG49dGhpcztmdW5jdGlvbiByKHIsbyl7cmV0dXJuIGEudHlwZT0idGhyb3ciLGEuYXJnPXQsbi5uZXh0PXIsbyYmKG4ubWV0aG9kPSJuZXh0IixuLmFyZz1lKSwhIW99Zm9yKHZhciBpPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtpPj0wOy0taSl7dmFyIHM9dGhpcy50cnlFbnRyaWVzW2ldLGE9cy5jb21wbGV0aW9uO2lmKCJyb290Ij09PXMudHJ5TG9jKXJldHVybiByKCJlbmQiKTtpZihzLnRyeUxvYzw9dGhpcy5wcmV2KXt2YXIgYz1vLmNhbGwocywiY2F0Y2hMb2MiKSx1PW8uY2FsbChzLCJmaW5hbGx5TG9jIik7aWYoYyYmdSl7aWYodGhpcy5wcmV2PHMuY2F0Y2hMb2MpcmV0dXJuIHIocy5jYXRjaExvYywhMCk7aWYodGhpcy5wcmV2PHMuZmluYWxseUxvYylyZXR1cm4gcihzLmZpbmFsbHlMb2MpfWVsc2UgaWYoYyl7aWYodGhpcy5wcmV2PHMuY2F0Y2hMb2MpcmV0dXJuIHIocy5jYXRjaExvYywhMCl9ZWxzZXtpZighdSl0aHJvdyBuZXcgRXJyb3IoInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5Iik7aWYodGhpcy5wcmV2PHMuZmluYWxseUxvYylyZXR1cm4gcihzLmZpbmFsbHlMb2MpfX19fSxhYnJ1cHQ6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO24+PTA7LS1uKXt2YXIgcj10aGlzLnRyeUVudHJpZXNbbl07aWYoci50cnlMb2M8PXRoaXMucHJldiYmby5jYWxsKHIsImZpbmFsbHlMb2MiKSYmdGhpcy5wcmV2PHIuZmluYWxseUxvYyl7dmFyIGk9cjticmVha319aSYmKCJicmVhayI9PT1lfHwiY29udGludWUiPT09ZSkmJmkudHJ5TG9jPD10JiZ0PD1pLmZpbmFsbHlMb2MmJihpPW51bGwpO3ZhciBzPWk/aS5jb21wbGV0aW9uOnt9O3JldHVybiBzLnR5cGU9ZSxzLmFyZz10LGk/KHRoaXMubWV0aG9kPSJuZXh0Iix0aGlzLm5leHQ9aS5maW5hbGx5TG9jLG0pOnRoaXMuY29tcGxldGUocyl9LGNvbXBsZXRlOmZ1bmN0aW9uKGUsdCl7aWYoInRocm93Ij09PWUudHlwZSl0aHJvdyBlLmFyZztyZXR1cm4iYnJlYWsiPT09ZS50eXBlfHwiY29udGludWUiPT09ZS50eXBlP3RoaXMubmV4dD1lLmFyZzoicmV0dXJuIj09PWUudHlwZT8odGhpcy5ydmFsPXRoaXMuYXJnPWUuYXJnLHRoaXMubWV0aG9kPSJyZXR1cm4iLHRoaXMubmV4dD0iZW5kIik6Im5vcm1hbCI9PT1lLnR5cGUmJnQmJih0aGlzLm5leHQ9dCksbX0sZmluaXNoOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7dD49MDstLXQpe3ZhciBuPXRoaXMudHJ5RW50cmllc1t0XTtpZihuLmZpbmFsbHlMb2M9PT1lKXJldHVybiB0aGlzLmNvbXBsZXRlKG4uY29tcGxldGlvbixuLmFmdGVyTG9jKSxDKG4pLG19fSxjYXRjaDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO3Q+PTA7LS10KXt2YXIgbj10aGlzLnRyeUVudHJpZXNbdF07aWYobi50cnlMb2M9PT1lKXt2YXIgcj1uLmNvbXBsZXRpb247aWYoInRocm93Ij09PXIudHlwZSl7dmFyIG89ci5hcmc7QyhuKX1yZXR1cm4gb319dGhyb3cgbmV3IEVycm9yKCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHQiKX0sZGVsZWdhdGVZaWVsZDpmdW5jdGlvbih0LG4scil7cmV0dXJuIHRoaXMuZGVsZWdhdGU9e2l0ZXJhdG9yOlAodCkscmVzdWx0TmFtZTpuLG5leHRMb2M6cn0sIm5leHQiPT09dGhpcy5tZXRob2QmJih0aGlzLmFyZz1lKSxtfX0sdH1mdW5jdGlvbiBzKGUsdCxuLHIsbyxpLHMpe3RyeXt2YXIgYT1lW2ldKHMpLGM9YS52YWx1ZX1jYXRjaChlKXtyZXR1cm4gdm9pZCBuKGUpfWEuZG9uZT90KGMpOlByb21pc2UucmVzb2x2ZShjKS50aGVuKHIsbyl9ZnVuY3Rpb24gYShlKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdD10aGlzLG49YXJndW1lbnRzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24ocixvKXt2YXIgaT1lLmFwcGx5KHQsbik7ZnVuY3Rpb24gYShlKXtzKGkscixvLGEsYywibmV4dCIsZSl9ZnVuY3Rpb24gYyhlKXtzKGkscixvLGEsYywidGhyb3ciLGUpfWEodm9pZCAwKX0pKX19ZnVuY3Rpb24gYyhlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdShyLmtleSkscil9fWZ1bmN0aW9uIHUoZSl7dmFyIHQ9ZnVuY3Rpb24oZSx0KXtpZigib2JqZWN0IiE9cihlKXx8IWUpcmV0dXJuIGU7dmFyIG49ZVtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PW4pe3ZhciBvPW4uY2FsbChlLCJzdHJpbmciKTtpZigib2JqZWN0IiE9cihvKSlyZXR1cm4gbzt0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpfXJldHVybiBTdHJpbmcoZSl9KGUpO3JldHVybiJzeW1ib2wiPT1yKHQpP3Q6U3RyaW5nKHQpfW4oNjEzKTt2YXIgbD1uKDMwMCksZj1uKDg2NyksaD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0odGhpcyxlKSx0aGlzLmFwcD10fHx7fSx0aGlzLmRlc2NyaXB0aW9uPSIiLHRoaXMuZGlybmFtZT0iIix0aGlzLmFwcG5hbWU9IiIsdGhpcy5uYW1lPSIiLHRoaXMuc2x1Zz0iIix0aGlzLmxpbms9IiIsdGhpcy5ldmVudHM9W10sdGhpcy5yZW5kZXJJbnRvcz17fSx0aGlzLmFsZXJ0cz0wLHRoaXMuY2F0ZWdvcmllcz0iIix0aGlzLnNxbGNhY2hlPXt9LHRoaXMuc3FsY2FjaGVfZW5hYmxlZD0wLHRoaXMuc2VydmljZXM9W10sdGhpcy5jb21wb25lbnRzPVtdLHRoaXMucmVxdWVzdF9ub19pbnRlcnJ1cHRzPSExLHRoaXMuZGJfdGFibGVzPVtdLHRoaXMudmVyc2lvbj0xLHRoaXMubWV0YT1bXSx0aGlzLnN0eWxlcz1bXSx0aGlzLnNjcmlwdHM9W10sdGhpcy5pbmNsdWRlc19hdHRhY2hlZD0wLHRoaXMuZXZlbnRMaXN0ZW5lcnM9W10sdGhpcy50aGVtZV9vcHRpb25zPXtsaXRlOiJmYS1zb2xpZCBmYS1zdW4iLGRhcms6ImZhLXNvbGlkIGZhLWNsb3VkLW1vb24iLG1pZG5pZ2h0OiJmYS1zb2xpZCBmYS1tb29uIixtaWxxdWV0b2FzdDoiZmEtc29saWQgZmEtY293IixzYW5ncmUzMDAwOiJmYS1zb2xpZCBmYS1kcm9wbGV0LXNsYXNoIn0sdGhpcy5wcm9jZXNzZWRUeHM9e30sdGhpcy5wYXJhbWV0ZXJzPXt9LHRoaXMuZGVmYXVsdF9odG1sPTAsdGhpcy5icm93c2VyX2FjdGl2ZT0wLHRoaXMucG9zc2libGVIb21lPTAsdGhpcy5wdWJsaWNLZXk9IiJ9dmFyIHQsbixyLHMsdSxoLHAsZCx5LHYsZyxtLGIsdyxTLGsseCxFO3JldHVybiB0PWUsbj1be2tleToiaW5zdGFsbE1vZHVsZSIsdmFsdWU6KEU9YShpKCkubWFyaygoZnVuY3Rpb24gZSh0KXt2YXIgbixyLG8scyxhLGMsdTtyZXR1cm4gaSgpLndyYXAoKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmlmKDEhPT10aGlzLmFwcC5CUk9XU0VSKXtlLm5leHQ9MjticmVha31yZXR1cm4gZS5hYnJ1cHQoInJldHVybiIpO2Nhc2UgMjppZihuPSIiLmNvbmNhdCgiLyIsIi8uLi8uLi9tb2RzLyIpLmNvbmNhdCh0aGlzLmRpcm5hbWUsIi9zcWwiKSxyPXQuc3RvcmFnZS5yZXR1cm5GaWxlU3lzdGVtKCksbz1lbmNvZGVVUkkodGhpcy5yZXR1cm5TbHVnKCkpLG51bGw9PXIpe2UubmV4dD0yMzticmVha31pZighci5leGlzdHNTeW5jKGwubm9ybWFsaXplKG4pKSl7ZS5uZXh0PTIzO2JyZWFrfXM9ci5yZWFkZGlyU3luYyhuKS5zb3J0KCksYT0wO2Nhc2UgOTppZighKGE8cy5sZW5ndGgpKXtlLm5leHQ9MjM7YnJlYWt9cmV0dXJuIGUucHJldj0xMCxjPWwuam9pbihuLHNbYV0pLHU9ci5yZWFkRmlsZVN5bmMoYywidXRmOCIpLGUubmV4dD0xNSx0LnN0b3JhZ2UuZXhlY3V0ZURhdGFiYXNlKHUsbyk7Y2FzZSAxNTplLm5leHQ9MjA7YnJlYWs7Y2FzZSAxNzplLnByZXY9MTcsZS50MD1lLmNhdGNoKDEwKSxjb25zb2xlLmVycm9yKGUudDApO2Nhc2UgMjA6YSsrLGUubmV4dD05O2JyZWFrO2Nhc2UgMjM6Y2FzZSJlbmQiOnJldHVybiBlLnN0b3AoKX19KSxlLHRoaXMsW1sxMCwxN11dKX0pKSksZnVuY3Rpb24oZSl7cmV0dXJuIEUuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6ImluaXRpYWxpemUiLHZhbHVlOih4PWEoaSgpLm1hcmsoKGZ1bmN0aW9uIGUodCl7dmFyIG4scixvLHMsYSxjLHUsZixoPXRoaXM7cmV0dXJuIGkoKS53cmFwKChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyZXR1cm4gZS5uZXh0PTIsdGhpcy5hcHAud2FsbGV0LmdldFB1YmxpY0tleSgpO2Nhc2UgMjp0aGlzLnB1YmxpY0tleT1lLnNlbnQscj1pKCkubWFyaygoZnVuY3Rpb24gZShuKXtyZXR1cm4gaSgpLndyYXAoKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnQuY29ubmVjdGlvbi5vbihoLmV2ZW50c1tuXSwoZnVuY3Rpb24oZSl7aC5yZWNlaXZlRXZlbnQoaC5ldmVudHNbbl0sZSl9KSk7Y2FzZSAxOmNhc2UiZW5kIjpyZXR1cm4gZS5zdG9wKCl9fSksZSl9KSksbz0wO2Nhc2UgNTppZighKG88dGhpcy5ldmVudHMubGVuZ3RoKSl7ZS5uZXh0PTEwO2JyZWFrfXJldHVybiBlLmRlbGVnYXRlWWllbGQocihvKSwidDAiLDcpO2Nhc2UgNzpvKyssZS5uZXh0PTU7YnJlYWs7Y2FzZSAxMDppZigxIT09dC5CUk9XU0VSKXtlLm5leHQ9MTI7YnJlYWt9cmV0dXJuIGUuYWJydXB0KCJyZXR1cm4iKTtjYXNlIDEyOmlmKHM9IiIuY29uY2F0KCIvIiwiLy4uLy4uL21vZHMvIikuY29uY2F0KHRoaXMuZGlybmFtZSwiL3NxbCIpLG51bGwhPShhPW51bGw9PXR8fG51bGw9PT0obj10LnN0b3JhZ2UpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnJldHVybkZpbGVTeXN0ZW0oKSkmJmEuZXhpc3RzU3luYyhsLm5vcm1hbGl6ZShzKSkpZm9yKGM9YS5yZWFkZGlyU3luYyhzKSx1PTA7dTxjLmxlbmd0aDt1KyspZj0oZj1jW3VdLnNsaWNlKDAsLTQpKS5yZXBsYWNlKC9cZCskLywiIiksdGhpcy5kYl90YWJsZXMucHVzaChmKTsiIj09PXRoaXMuYXBwbmFtZSYmKHRoaXMuYXBwbmFtZT10aGlzLm5hbWUpO2Nhc2UgMTY6Y2FzZSJlbmQiOnJldHVybiBlLnN0b3AoKX19KSxlLHRoaXMpfSkpKSxmdW5jdGlvbihlKXtyZXR1cm4geC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleToicmVuZGVyIix2YWx1ZTooaz1hKGkoKS5tYXJrKChmdW5jdGlvbiBlKCl7dmFyIHQsbixyLG87cmV0dXJuIGkoKS53cmFwKChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDp0aGlzLmJyb3dzZXJfYWN0aXZlJiZ0aGlzLnBvc3NpYmxlSG9tZSYmKHRoaXMuYXBwLm9wdGlvbnMuaG9tZU1vZHVsZT10aGlzLnJldHVybk5hbWUoKSx0aGlzLmFwcC5zdG9yYWdlLnNhdmVPcHRpb25zKCkpLDA9PT10aGlzLmluY2x1ZGVzX2F0dGFjaGVkJiYodGhpcy5tZXRhJiZ0aGlzLmF0dGFjaE1ldGEoKSwobnVsbD09PSh0PXRoaXMuc3R5bGVzKXx8dm9pZCAwPT09dD92b2lkIDA6dC5sZW5ndGgpPjAmJnRoaXMuYXR0YWNoU3R5bGVTaGVldHMoKSwobnVsbD09PShuPXRoaXMuc2NyaXB0cyl8fHZvaWQgMD09PW4/dm9pZCAwOm4ubGVuZ3RoKT4wJiYoY29uc29sZS5sb2coImF0dGFjaFNjcmlwdHMgaW4gIit0aGlzLm5hbWUsdGhpcy5zY3JpcHRzKSx0aGlzLmF0dGFjaFNjcmlwdHMoKSksKG51bGw9PT0ocj10aGlzLnBvc3RTY3JpcHRzKXx8dm9pZCAwPT09cj92b2lkIDA6ci5sZW5ndGgpPjAmJnRoaXMuYXR0YWNoUG9zdFNjcmlwdHMoKSx0aGlzLmluY2x1ZGVzX2F0dGFjaGVkPTEpLG89MDtjYXNlIDM6aWYoIShvPHRoaXMuY29tcG9uZW50cy5sZW5ndGgpKXtlLm5leHQ9OTticmVha31yZXR1cm4gZS5uZXh0PTYsdGhpcy5jb21wb25lbnRzW29dLnJlbmRlcigpO2Nhc2UgNjpvKyssZS5uZXh0PTM7YnJlYWs7Y2FzZSA5OmNhc2UiZW5kIjpyZXR1cm4gZS5zdG9wKCl9fSksZSx0aGlzKX0pKSksZnVuY3Rpb24oKXtyZXR1cm4gay5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleToicmV0dXJuTmFtZSIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hcHBuYW1lP3RoaXMuYXBwbmFtZTp0aGlzLmdhbWVuYW1lP3RoaXMuZ2FtZW5hbWU6dGhpcy5uYW1lP3RoaXMubmFtZToiVW5rbm93biBNb2R1bGUifX0se2tleToicmV0dXJuVGl0bGUiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGl0bGU/dGhpcy50aXRsZTp0aGlzLnJldHVybk5hbWUoKX19LHtrZXk6InJldHVybkltYWdlIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiIvc2FpdG8vaW1nL2RyZWFtc2NhcGUucG5nIn19LHtrZXk6InJldHVybkJhbm5lciIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4iL3NhaXRvL2ltZy9kcmVhbXNjYXBlLnBuZyJ9fSx7a2V5OiJoYXNTZXR0aW5ncyIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19LHtrZXk6ImxvYWRTZXR0aW5ncyIsdmFsdWU6ZnVuY3Rpb24oKXt9fSx7a2V5OiJpbml0aWFsaXplSFRNTCIsdmFsdWU6KFM9YShpKCkubWFyaygoZnVuY3Rpb24gZSh0KXtyZXR1cm4gaSgpLndyYXAoKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmNhc2UiZW5kIjpyZXR1cm4gZS5zdG9wKCl9fSksZSl9KSkpLGZ1bmN0aW9uKGUpe3JldHVybiBTLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OiJhdHRhY2hFdmVudHMiLHZhbHVlOmZ1bmN0aW9uKGUpe319LHtrZXk6Im9uQ29uZmlybWF0aW9uIix2YWx1ZToodz1hKGkoKS5tYXJrKChmdW5jdGlvbiBlKHQsbixyKXtyZXR1cm4gaSgpLndyYXAoKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmNhc2UiZW5kIjpyZXR1cm4gZS5zdG9wKCl9fSksZSl9KSkpLGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleToicmV0dXJuTnVtYmVyT2ZOb3RpZmljYXRpb25zIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiAwfX0se2tleToib25OZXdCbG9jayIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt9fSx7a2V5OiJvbkNoYWluUmVvcmdhbml6YXRpb24iLHZhbHVlOmZ1bmN0aW9uKGUsdCxuLHIpe319LHtrZXk6Im9uV2FsbGV0UmVzZXQiLHZhbHVlOihiPWEoaSgpLm1hcmsoKGZ1bmN0aW9uIGUodCl7cmV0dXJuIGkoKS53cmFwKChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyZXR1cm4gZS5uZXh0PTIsdGhpcy5hcHAud2FsbGV0LmdldFB1YmxpY0tleSgpO2Nhc2UgMjp0aGlzLnB1YmxpY0tleT1lLnNlbnQ7Y2FzZSAzOmNhc2UiZW5kIjpyZXR1cm4gZS5zdG9wKCl9fSksZSx0aGlzKX0pKSksZnVuY3Rpb24oZSl7cmV0dXJuIGIuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6Im9uUGVlckhhbmRzaGFrZUNvbXBsZXRlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bnVsbDt0Lmhhc1NlcnZpY2UoImFyY2hpdmUiKSYmdGhpcy5vbkFyY2hpdmVIYW5kc2hha2VDb21wbGV0ZShlLHQpfX0se2tleToib25QZWVyU2VydmljZVVwIix2YWx1ZToobT1hKGkoKS5tYXJrKChmdW5jdGlvbiBlKHQsbixyKXtyZXR1cm4gaSgpLndyYXAoKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOmNhc2UiZW5kIjpyZXR1cm4gZS5zdG9wKCl9fSksZSl9KSkpLGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gbS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleToib25BcmNoaXZlSGFuZHNoYWtlQ29tcGxldGUiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7fX0se2tleToib25Db25uZWN0aW9uU3RhYmxlIix2YWx1ZTpmdW5jdGlvbihlLHQpe319LHtrZXk6Im9uQ29ubmVjdGlvblVuc3RhYmxlIix2YWx1ZTpmdW5jdGlvbihlLHQpe319LHtrZXk6InNob3VsZEFmZml4Q2FsbGJhY2tUb01vZHVsZSIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10aGlzLm5hbWU/MTowfX0se2tleToid2ViU2VydmVyIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dmFyIHIsbz0iIi5jb25jYXQoIi8iLCIvLi4vLi4vbW9kcy8iKS5jb25jYXQodGhpcy5kaXJuYW1lLCIvd2ViIiksaT1udWxsPT1lfHxudWxsPT09KHI9ZS5zdG9yYWdlKXx8dm9pZCAwPT09cj92b2lkIDA6ci5yZXR1cm5GaWxlU3lzdGVtKCk7bnVsbCE9aSYmKGkuZXhpc3RzU3luYyhvKT90LnVzZSgiLyIrZW5jb2RlVVJJKHRoaXMucmV0dXJuU2x1ZygpKSxuLnN0YXRpYyhvKSk6dGhpcy5kZWZhdWx0X2h0bWwmJnQudXNlKCIvIitlbmNvZGVVUkkodGhpcy5yZXR1cm5TbHVnKCkpLG4uc3RhdGljKCIvLy4uLy4uL2xpYi90ZW1wbGF0ZXMvaHRtbCIpKSl9fSx7a2V5OiJ1cGRhdGVCbG9ja2NoYWluU3luYyIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe319LHtrZXk6ImFkZFNjcmlwdCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDx0aGlzLnNjcmlwdHMubGVuZ3RoO3QrKylpZih0aGlzLnNjcmlwdHNbdF09PT1lKXJldHVybjt0aGlzLnNjcmlwdHMucHVzaChlKX19LHtrZXk6ImFkZFN0eWxlIix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PHRoaXMuc3R5bGVzLmxlbmd0aDt0KyspaWYodGhpcy5zdHlsZXNbdF09PT1lKXJldHVybjt0aGlzLnN0eWxlcy5wdXNoKGUpfX0se2tleToiYWRkQ29tcG9uZW50Iix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PHRoaXMuY29tcG9uZW50cy5sZW5ndGg7dCsrKWlmKHRoaXMuY29tcG9uZW50c1t0XT09PWUpcmV0dXJuO3RoaXMuY29tcG9uZW50cy5wdXNoKGUpfX0se2tleToicmVtb3ZlQ29tcG9uZW50Iix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy5jb21wb25lbnRzLmxlbmd0aDt0Pj0wO3QtLSl0aGlzLmNvbXBvbmVudHNbdF09PT1lJiZ0aGlzLmNvbXBvbmVudHMuc3BsaWNlKHQsMSl9fSx7a2V5OiJjYW5SZW5kZXJJbnRvIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiExfX0se2tleToicmVuZGVySW50byIsdmFsdWU6KGc9YShpKCkubWFyaygoZnVuY3Rpb24gZSgpe3JldHVybiBpKCkud3JhcCgoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cmV0dXJuIGUuYWJydXB0KCJyZXR1cm4iLG51bGwpO2Nhc2UgMjpjYXNlImVuZCI6cmV0dXJuIGUuc3RvcCgpfX0pLGUpfSkpKSxmdW5jdGlvbigpe3JldHVybiBnLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OiJyZXNwb25kVG8iLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9fSx7a2V5OiJyZWNlaXZlRXZlbnQiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7fX0se2tleToic2VuZEV2ZW50Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMuYXBwLmNvbm5lY3Rpb24uZW1pdChlLHQpfX0se2tleToiaGFuZGxlUGVlclRyYW5zYWN0aW9uIix2YWx1ZToodj1hKGkoKS5tYXJrKChmdW5jdGlvbiBlKHQpe3ZhciBuLHIsbyxzLGEsYyx1LGwsaCxwLGQseSx2LGcsbSxiLHcsUyxrLHgsRSxPLEEsXyxqLE4sVD1hcmd1bWVudHM7cmV0dXJuIGkoKS53cmFwKChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDppZihyPVQubGVuZ3RoPjMmJnZvaWQgMCE9PVRbM10/VFszXTpudWxsLG51bGwhPShuPVQubGVuZ3RoPjEmJnZvaWQgMCE9PVRbMV0/VFsxXTpudWxsKSl7ZS5uZXh0PTU7YnJlYWt9cmV0dXJuIGUuYWJydXB0KCJyZXR1cm4iLDApO2Nhc2UgNTplLnByZXY9NSxvPW4ucmV0dXJuTWVzc2FnZSgpLGUubmV4dD0xNjticmVhaztjYXNlIDk6cmV0dXJuIGUucHJldj05LGUudDA9ZS5jYXRjaCg1KSxjb25zb2xlLmxvZygiISFAQCFAIyEjIUAjIUAjIiksY29uc29sZS5sb2coIiEhQEAhQCMhIyFAIyFAIyIpLGNvbnNvbGUubG9nKCIhIUBAIUAjISMhQCMhQCMiKSxjb25zb2xlLmxvZyhmLnN0cmluZ2lmeShuKSksZS5hYnJ1cHQoInJldHVybiIsMCk7Y2FzZSAxNjpzPTA7Y2FzZSAxNzppZighKHM8dGhpcy5kYl90YWJsZXMubGVuZ3RoKSl7ZS5uZXh0PTQ3O2JyZWFrfWlmKGM9dGhpcy5uYW1lLnRvTG93ZXJDYXNlKCkrIiBsb2FkICIrdGhpcy5kYl90YWJsZXNbc10sKG51bGw9PT0oYT1vKXx8dm9pZCAwPT09YT92b2lkIDA6YS5yZXF1ZXN0KSE9PWMpe2UubmV4dD00NDticmVha31pZihjb25zb2xlLmxvZygiZXhwZWN0ZWRfcmVxdWVzdCA6ICIrYyksZD1udWxsPT09KHU9by5kYXRhKXx8dm9pZCAwPT09dT92b2lkIDA6dS5zZWxlY3QseT1udWxsPT09KGw9by5kYXRhKXx8dm9pZCAwPT09bD92b2lkIDA6bC5kYm5hbWUsdj1udWxsPT09KGg9by5kYXRhKXx8dm9pZCAwPT09aD92b2lkIDA6aC50YWJsZW5hbWUsZz1udWxsPT09KHA9by5kYXRhKXx8dm9pZCAwPT09cD92b2lkIDA6cC53aGVyZSwvXlthLXoiYCc9XyooKVwuXG5cdFxyICwwLTlBLVpdKyQvLnRlc3QoZCkpe2UubmV4dD0yNzticmVha31yZXR1cm4gZS5hYnJ1cHQoInJldHVybiIpO2Nhc2UgMjc6aWYoL15bYS16ImAnPV8oKVwuICwwLTlBLVpdKyQvLnRlc3QoeSkpe2UubmV4dD0yOTticmVha31yZXR1cm4gZS5hYnJ1cHQoInJldHVybiIpO2Nhc2UgMjk6aWYoL15bYS16ImAnPV8oKVwuICwwLTlBLVpdKyQvLnRlc3Qodikpe2UubmV4dD0zMTticmVha31yZXR1cm4gZS5hYnJ1cHQoInJldHVybiIpO2Nhc2UgMzE6cmV0dXJuIG09IlNFTEVDVCAiLmNvbmNhdChkLCJcbiAgICAgICAgICAgICAgICAgICBGUk9NICIpLmNvbmNhdCh2KSwiIiE9PWcmJihtKz0iIFdIRVJFICIuY29uY2F0KGcpKSxiPXt9LGUubmV4dD0zNix0aGlzLmFwcC5zdG9yYWdlLnF1ZXJ5RGF0YWJhc2UobSxiLHkpO2Nhc2UgMzY6aWYodz1lLnNlbnQsKFM9e30pLmVycj0iIixTLnJvd3M9dywhcil7ZS5uZXh0PTQzO2JyZWFrfXJldHVybiByKFMpLGUuYWJydXB0KCJyZXR1cm4iLDEpO2Nhc2UgNDM6cmV0dXJuIGUuYWJydXB0KCJyZXR1cm4iLDApO2Nhc2UgNDQ6cysrLGUubmV4dD0xNzticmVhaztjYXNlIDQ3OmlmKCJyYXdTUUwiIT09by5yZXF1ZXN0KXtlLm5leHQ9Njg7YnJlYWt9aWYoKG51bGw9PT0oaz1vKXx8dm9pZCAwPT09a3x8bnVsbD09PShrPWsuZGF0YSl8fHZvaWQgMD09PWs/dm9pZCAwOmsubW9kdWxlKSE9PXRoaXMubmFtZSl7ZS5uZXh0PTY4O2JyZWFrfWlmKE89bnVsbD09PSh4PW8pfHx2b2lkIDA9PT14fHxudWxsPT09KHg9eC5kYXRhKXx8dm9pZCAwPT09eD92b2lkIDA6eC5zcWwsQT1udWxsPT09KEU9byl8fHZvaWQgMD09PUV8fG51bGw9PT0oRT1FLmRhdGEpfHx2b2lkIDA9PT1FP3ZvaWQgMDpFLmRibmFtZSxfPXt9LCF0aGlzLnNxbGNhY2hlW09dfHwxIT09dGhpcy5zcWxjYWNoZV9lbmFibGVkKXtlLm5leHQ9NTc7YnJlYWt9aj10aGlzLnNxbGNhY2hlW09dLGUubmV4dD02MTticmVhaztjYXNlIDU3OnJldHVybiBlLm5leHQ9NTksdGhpcy5hcHAuc3RvcmFnZS5xdWVyeURhdGFiYXNlKE8sXyxBKTtjYXNlIDU5Omo9ZS5zZW50LHRoaXMuc3FsY2FjaGVfZW5hYmxlZCYmKHRoaXMuc3FsY2FjaGVbT109aik7Y2FzZSA2MTppZigoTj17fSkuZXJyPSIiLE4ucm93cz1qLCFyKXtlLm5leHQ9Njc7YnJlYWt9cmV0dXJuIHIoTiksZS5hYnJ1cHQoInJldHVybiIsMSk7Y2FzZSA2NzpjYXNlIDY4OnJldHVybiBlLmFicnVwdCgicmV0dXJuIiwwKTtjYXNlIDY5OmNhc2UiZW5kIjpyZXR1cm4gZS5zdG9wKCl9fSksZSx0aGlzLFtbNSw5XV0pfSkpKSxmdW5jdGlvbihlKXtyZXR1cm4gdi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleToicmV0dXJuU2VydmljZXMiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VydmljZXN9fSx7a2V5OiJzZW5kUGVlckRhdGFiYXNlUmVxdWVzdCIsdmFsdWU6KHk9YShpKCkubWFyaygoZnVuY3Rpb24gZSh0LG4pe3ZhciByLG8scyxhLGMsdT1hcmd1bWVudHM7cmV0dXJuIGkoKS53cmFwKChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDppZihyPXUubGVuZ3RoPjImJnZvaWQgMCE9PXVbMl0/dVsyXToiIixvPXUubGVuZ3RoPjMmJnZvaWQgMCE9PXVbM10/dVszXToiIixzPXUubGVuZ3RoPjQmJnZvaWQgMCE9PXVbNF0/dVs0XTpudWxsLGE9dS5sZW5ndGg+NSYmdm9pZCAwIT09dVs1XT91WzVdOm51bGwsKGM9e30pLnJlcXVlc3Q9dCsiIGxvYWQgIituLGMuZGF0YT17fSxjLmRhdGEuZGJuYW1lPXQsYy5kYXRhLnRhYmxlbmFtZT1uLGMuZGF0YS5zZWxlY3Q9cixjLmRhdGEud2hlcmU9byxudWxsIT1zKXtlLm5leHQ9MTU7YnJlYWt9cmV0dXJuIGUuYWJydXB0KCJyZXR1cm4iLHRoaXMuYXBwLm5ldHdvcmsuc2VuZFJlcXVlc3RBc1RyYW5zYWN0aW9uKGMucmVxdWVzdCxjLmRhdGEsKGZ1bmN0aW9uKGUpe3JldHVybiBhKGUpfSkpKTtjYXNlIDE1OnJldHVybiBlLmFicnVwdCgicmV0dXJuIix0aGlzLmFwcC5uZXR3b3JrLnNlbmRSZXF1ZXN0QXNUcmFuc2FjdGlvbihjLnJlcXVlc3QsYy5kYXRhLChmdW5jdGlvbihlKXtyZXR1cm4gYShlKX0pLHMucGVlckluZGV4KSk7Y2FzZSAxNjpjYXNlImVuZCI6cmV0dXJuIGUuc3RvcCgpfX0pLGUsdGhpcyl9KSkpLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6InNlbmRQZWVyRGF0YWJhc2VSZXF1ZXN0V2l0aEZpbHRlciIsdmFsdWU6KGQ9YShpKCkubWFyaygoZnVuY3Rpb24gZSgpe3ZhciB0LG4scixvLHMsYT1hcmd1bWVudHM7cmV0dXJuIGkoKS53cmFwKChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDppZih0PWEubGVuZ3RoPjAmJnZvaWQgMCE9PWFbMF0/YVswXToiIixyPWEubGVuZ3RoPjImJnZvaWQgMCE9PWFbMl0/YVsyXTpudWxsLG89YS5sZW5ndGg+MyYmdm9pZCAwIT09YVszXT9hWzNdOm51bGwsIiIhPT0obj1hLmxlbmd0aD4xJiZ2b2lkIDAhPT1hWzFdP2FbMV06IiIpKXtlLm5leHQ9NjticmVha31yZXR1cm4gZS5hYnJ1cHQoInJldHVybiIpO2Nhc2UgNjppZigiIiE9PXQpe2UubmV4dD04O2JyZWFrfXJldHVybiBlLmFicnVwdCgicmV0dXJuIik7Y2FzZSA4OmlmKHRoaXMuYXBwLm1vZHVsZXMucmV0dXJuTW9kdWxlKHQpKXtlLm5leHQ9MTE7YnJlYWt9cmV0dXJuIGNvbnNvbGUuZXJyb3IodCsiIG5vdCBmb3VuZCEiKSxlLmFicnVwdCgicmV0dXJuIik7Y2FzZSAxMToocz17fSkucmVxdWVzdD0icmF3U1FMIixzLmRhdGE9e30scy5kYXRhLnNxbD1uLHMuZGF0YS5tb2R1bGU9dCxzLmRhdGEuZGJuYW1lPXRoaXMuYXBwLm1vZHVsZXMucmV0dXJuTW9kdWxlKHQpLnJldHVyblNsdWcoKSxjb25zb2xlLmxvZygiU1BEUldGOiAiK3QpLHRoaXMuc2VuZFBlZXJSZXF1ZXN0V2l0aEZpbHRlcigoZnVuY3Rpb24oKXtyZXR1cm4gc30pLHIsbyk7Y2FzZSAxOTpjYXNlImVuZCI6cmV0dXJuIGUuc3RvcCgpfX0pLGUsdGhpcyl9KSkpLGZ1bmN0aW9uKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6InNlbmRQZWVyUmVxdWVzdFdpdGhTZXJ2aWNlRmlsdGVyIix2YWx1ZToocD1hKGkoKS5tYXJrKChmdW5jdGlvbiBlKHQsbil7dmFyIHIsbz1hcmd1bWVudHM7cmV0dXJuIGkoKS53cmFwKChmdW5jdGlvbihlKXtmb3IoOzspc3dpdGNoKGUucHJldj1lLm5leHQpe2Nhc2UgMDpyPW8ubGVuZ3RoPjImJnZvaWQgMCE9PW9bMl0/b1syXTpmdW5jdGlvbihlKXt9LHRoaXMuc2VuZFBlZXJSZXF1ZXN0V2l0aEZpbHRlcigoZnVuY3Rpb24oKXtyZXR1cm4gbn0pLHIsKGZ1bmN0aW9uKGUpe2lmKGUuc2VydmljZXMpZm9yKHZhciBuPTA7bjxlLnNlcnZpY2VzLmxlbmd0aDtuKyspaWYoZS5zZXJ2aWNlc1tuXS5zZXJ2aWNlPT09dClyZXR1cm4gMX0pKTtjYXNlIDI6Y2FzZSJlbmQiOnJldHVybiBlLnN0b3AoKX19KSxlLHRoaXMpfSkpKSxmdW5jdGlvbihlLHQpe3JldHVybiBwLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OiJzZW5kUGVlclJlcXVlc3RXaXRoRmlsdGVyIix2YWx1ZTooaD1hKGkoKS5tYXJrKChmdW5jdGlvbiBlKCl7dmFyIHQsbixyLG8scyxhLGMsdSxsLGY9YXJndW1lbnRzO3JldHVybiBpKCkud3JhcCgoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6aWYodD1mLmxlbmd0aD4xJiZ2b2lkIDAhPT1mWzFdP2ZbMV06bnVsbCxuPWYubGVuZ3RoPjImJnZvaWQgMCE9PWZbMl0/ZlsyXTpudWxsLG51bGwhPT0ocj0oZi5sZW5ndGg+MCYmdm9pZCAwIT09ZlswXT9mWzBdOm51bGwpKCkpKXtlLm5leHQ9NjticmVha31yZXR1cm4gZS5hYnJ1cHQoInJldHVybiIpO2Nhc2UgNjpyZXR1cm4gZS5uZXh0PTgsdGhpcy5hcHAubmV0d29yay5nZXRQZWVycygpO2Nhc2UgODpmb3Iobz1lLnNlbnQscz1bXSxhPTA7YTxvLmxlbmd0aDthKyspbiYmIW4ob1thXSl8fHMucHVzaChvW2FdKTtpZigwIT09cy5sZW5ndGgpe2UubmV4dD0xNDticmVha31yZXR1cm4gY29uc29sZS53YXJuKCJzZW5kUGVlclJlcXVlc3RXaXRoRmlsdGVyIGZvdW5kIG5vIHBlZXJzIiksZS5hYnJ1cHQoInJldHVybiIpO2Nhc2UgMTQ6Zm9yKGM9MCx1PXM7Yzx1Lmxlbmd0aDtjKyspbD11W2NdLHRoaXMuYXBwLm5ldHdvcmsuc2VuZFJlcXVlc3RBc1RyYW5zYWN0aW9uKHIucmVxdWVzdCxyLmRhdGEsKGZ1bmN0aW9uKGUpe251bGwhPXQmJnQoZSl9KSxsLnBlZXJJbmRleCk7Y2FzZSAxNTpjYXNlImVuZCI6cmV0dXJuIGUuc3RvcCgpfX0pLGUsdGhpcyl9KSkpLGZ1bmN0aW9uKCl7cmV0dXJuIGguYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6InNlbmRQZWVyRGF0YWJhc2VSZXF1ZXN0UmF3Iix2YWx1ZToodT1hKGkoKS5tYXJrKChmdW5jdGlvbiBlKHQsbil7dmFyIHIsbyxzPWFyZ3VtZW50cztyZXR1cm4gaSgpLndyYXAoKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnJldHVybiByPXMubGVuZ3RoPjImJnZvaWQgMCE9PXNbMl0/c1syXTpudWxsLChvPXt9KS5yZXF1ZXN0PSJyYXdTUUwiLG8uZGF0YT17fSxvLmRhdGEuc3FsPW4sby5kYXRhLmRibmFtZT10LG8uZGF0YS5tb2R1bGU9dGhpcy5uYW1lLGUuYWJydXB0KCJyZXR1cm4iLHRoaXMuYXBwLm5ldHdvcmsuc2VuZFJlcXVlc3RBc1RyYW5zYWN0aW9uKG8ucmVxdWVzdCxvLmRhdGEsKGZ1bmN0aW9uKGUpe3JldHVybiByKGUpfSkpKTtjYXNlIDg6Y2FzZSJlbmQiOnJldHVybiBlLnN0b3AoKX19KSxlLHRoaXMpfSkpKSxmdW5jdGlvbihlLHQpe3JldHVybiB1LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OiJpc1NsdWciLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlPT10aGlzLnJldHVyblNsdWcoKX19LHtrZXk6InJldHVyblNsdWciLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIiIhPT10aGlzLnNsdWd8fCh0aGlzLmFwcG5hbWU/dGhpcy5zbHVnPXRoaXMuYXBwbmFtZS50b0xvd2VyQ2FzZSgpOnRoaXMuc2x1Zz10aGlzLm5hbWUudG9Mb3dlckNhc2UoKSx0aGlzLnNsdWc9dGhpcy5zbHVnLnJlcGxhY2UoL1x0L2csIl8iKS5yZXBsYWNlKC9cIC9nLCIiKSksdGhpcy5zbHVnfX0se2tleToicmV0dXJuTGluayIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4iIiE9PXRoaXMubGlua3x8KHRoaXMubGluaz0iLyIrdGhpcy5yZXR1cm5TbHVnKCkpLHRoaXMubGlua319LHtrZXk6ImhhbmRsZVVybFBhcmFtcyIsdmFsdWU6ZnVuY3Rpb24oZSl7fX0se2tleToic2hvd0FsZXJ0Iix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuYWxlcnRzKys7dHJ5e3ZhciBlPSIjIit0aGlzLnJldHVyblNsdWcoKSsiID4gLnJlZGljb24iO2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSkuc3R5bGUuZGlzcGxheT0iYmxvY2sifWNhdGNoKGUpe319fSx7a2V5OiJhdHRhY2hNZXRhIix2YWx1ZTpmdW5jdGlvbihlKXt9fSx7a2V5OiJhdHRhY2hTdHlsZVNoZWV0cyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzOyEwIT09dGhpcy5zdHlsZXNoZWV0QWRkZWQmJih0aGlzLnN0eWxlcy5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbj0hMDtpZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJsaW5rIikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dHJ5eyJzdHlsZXNoZWV0Ij09PShudWxsPT1lP3ZvaWQgMDplLnJlbCkmJmUuYXR0cmlidXRlcy5ocmVmLm5vZGVWYWx1ZS5pbmNsdWRlcyh0KSYmKG49ITEpfWNhdGNoKGUpe319KSksbil7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGluayIpO3IucmVsPSJzdHlsZXNoZWV0IixyLnR5cGU9InRleHQvY3NzIixyLmhyZWY9dCsiP3Y9IitlLmFwcC5idWlsZF9udW1iZXIsZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiaGVhZCIpLmFwcGVuZENoaWxkKHIpfX0pKSx0aGlzLnN0eWxlc2hlZXRBZGRlZD0hMCl9fSx7a2V5OiJhdHRhY2hTY3JpcHRzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoITAhPT10aGlzLnNjcmlwdHNBZGRlZCl7dGhpcy5zY3JpcHRzQWRkZWQ9ITA7dmFyIHQsbj1mdW5jdGlvbihlLHQpe3ZhciBuPSJ1bmRlZmluZWQiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbIkBAaXRlcmF0b3IiXTtpZighbil7aWYoQXJyYXkuaXNBcnJheShlKXx8KG49ZnVuY3Rpb24oZSx0KXtpZihlKXtpZigic3RyaW5nIj09dHlwZW9mIGUpcmV0dXJuIG8oZSx0KTt2YXIgbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuIk9iamVjdCI9PT1uJiZlLmNvbnN0cnVjdG9yJiYobj1lLmNvbnN0cnVjdG9yLm5hbWUpLCJNYXAiPT09bnx8IlNldCI9PT1uP0FycmF5LmZyb20oZSk6IkFyZ3VtZW50cyI9PT1ufHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKT9vKGUsdCk6dm9pZCAwfX0oZSkpfHx0JiZlJiYibnVtYmVyIj09dHlwZW9mIGUubGVuZ3RoKXtuJiYoZT1uKTt2YXIgcj0wLGk9ZnVuY3Rpb24oKXt9O3JldHVybntzOmksbjpmdW5jdGlvbigpe3JldHVybiByPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtyKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOml9fXRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKX12YXIgcyxhPSEwLGM9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXtuPW4uY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPW4ubmV4dCgpO3JldHVybiBhPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe2M9ITAscz1lfSxmOmZ1bmN0aW9uKCl7dHJ5e2F8fG51bGw9PW4ucmV0dXJufHxuLnJldHVybigpfWZpbmFsbHl7aWYoYyl0aHJvdyBzfX19fSh0aGlzLnNjcmlwdHMpO3RyeXt2YXIgcj1mdW5jdGlvbigpe3ZhciBuPXQudmFsdWUscj0hMTtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJzY3JpcHQiKS5mb3JFYWNoKChmdW5jdGlvbihlKXt0cnl7ZS5hdHRyaWJ1dGVzLnNyYy5ub2RlVmFsdWU9PT1uJiYocj0hMCl9Y2F0Y2goZSl7fX0pKSxyfHxlLmF0dGFjaFNjcmlwdChuKX07Zm9yKG4ucygpOyEodD1uLm4oKSkuZG9uZTspcigpfWNhdGNoKGUpe24uZShlKX1maW5hbGx5e24uZigpfX19fSx7a2V5OiJhdHRhY2hTY3JpcHQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpO3JldHVybiB0LnR5cGU9InRleHQvamF2YXNjcmlwdCIsdC5zcmM9ZSsiP3Y9Iit0aGlzLmFwcC5idWlsZF9udW1iZXIsZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiaGVhZCIpLmFwcGVuZENoaWxkKHQpLG5ldyBQcm9taXNlKChmdW5jdGlvbihlLG4pe3QuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsKGZ1bmN0aW9uKCl7Y29uc29sZS5sb2coIlNjcmlwdCBsb2FkZWQgZHluYW1pY2FsbHkiKSxlKCl9KSksdC5hZGRFdmVudExpc3RlbmVyKCJlcnJvciIsKGZ1bmN0aW9uKCl7Y29uc29sZS5sb2coIkVycm9yIGxvYWRpbmcgc2NyaXB0IiksbigpfSkpfSkpfX0se2tleToiYXR0YWNoUG9zdFNjcmlwdHMiLHZhbHVlOmZ1bmN0aW9uKCl7ITAhPT10aGlzLnBvc3RTY3JpcHRzQWRkZWQmJih0aGlzLnBvc3RTY3JpcHRzLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciB0PSExO2lmKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoInNjcmlwdCIpLmZvckVhY2goKGZ1bmN0aW9uKG4pe3RyeXtuLmF0dHJpYnV0ZXMuc3JjLm5vZGVWYWx1ZT09PWUmJih0PSEwKX1jYXRjaChlKXt9fSkpLCF0KXt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTtuLnR5cGU9InRleHQvamF2YXNjcmlwdCIsbi5zcmM9ZSxuLnR5cGU9Im1vZHVsZSIsZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiYm9keSIpLmFwcGVuZENoaWxkKG4pfX0pKSx0aGlzLnBvc3RTY3JpcHRzQWRkZWQ9ITApfX0se2tleToicmVtb3ZlU2NyaXB0cyIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnNjcmlwdHMuZm9yRWFjaCgoZnVuY3Rpb24oZSl7Y29uc29sZS5sb2coInJlbW92aW5nIHNjcmlwdCIsZSl9KSksdGhpcy5zY3JpcHRzQWRkZWQ9ITF9fSx7a2V5OiJyZW1vdmVTdHlsZVNoZWV0cyIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5zdHlsZXNoZWV0cy5mb3JFYWNoKChmdW5jdGlvbihlKXtjb25zb2xlLmxvZygicmVtb3Zpbmcgc3R5bGVzaGVldCAiLGUpfSkpLHRoaXMuc3R5bGVzaGVldEFkZGVkPSExfX0se2tleToicmVtb3ZlTWV0YSIsdmFsdWU6ZnVuY3Rpb24oKXt9fSx7a2V5OiJyZW1vdmVFdmVudHMiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ldmVudExpc3RlbmVycy5mb3JFYWNoKChmdW5jdGlvbihlKXtkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGUudHlwZSxlLmxpc3RlbmVyKX0pKX19LHtrZXk6ImRlc3Ryb3kiLHZhbHVlOmZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKCJkZXN0cm95aW5nIil9fSx7a2V5OiJkaXNwbGF5TW9kYWwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXToiIjtzYWxlcnQoIiIuY29uY2F0KGUpLmNvbmNhdCh0PyI6IDxicj4iOiIiKS5jb25jYXQodCkpfX0se2tleToiZGlzcGxheVdhcm5pbmciLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXToiIixuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTo0ZTMscj0nPGRpdiBjbGFzcz0iZ2FtZV93YXJuaW5nX292ZXJsYXkiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2FtZV93YXJuaW5nX2hlYWRlciI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGUiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZ2FtZV93YXJuaW5nX3RpbWVyIiA+QXV0byBjbG9zZSBpbiA8c3BhbiBpZD0iY2xvY2tfbnVtYmVyIj4nLmNvbmNhdChNYXRoLmNlaWwobi8xZTMpLCI8L3NwYW4+czwvZGl2PiBcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGgyPiIpLmNvbmNhdChlLCI8L2gyPlxuICAgICAgICAgICAgICAgICAgPHAgIikuY29uY2F0KDA9PXQubGVuZ3RoPyJzdHlsZT0nZmxleDoxOyciOiJzdHlsZT0nZmxleDoyOyciLCI+IikuY29uY2F0KHQsIjwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj4iKSxvPXRoaXMub3ZlcmxheSxpPW51bGwscz1udWxsO24+MCYmKGk9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtvLmhpZGUoKSxjbGVhckludGVydmFsKHMpfSksbikscz1zZXRJbnRlcnZhbCgoZnVuY3Rpb24oKXtuLT0yNTA7dHJ5e2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjbG9ja19udW1iZXIiKS5pbm5lckhUTUw9TWF0aC5jZWlsKG4vMWUzKX1jYXRjaChlKXt9fSksMjUwKSksdGhpcy5vdmVybGF5LnNob3cociwoZnVuY3Rpb24oKXtpJiZjbGVhclRpbWVvdXQoaSkscyYmY2xlYXJJbnRlcnZhbChzKX0pKX19LHtrZXk6Im9uVXBncmFkZSIsdmFsdWU6KHM9YShpKCkubWFyaygoZnVuY3Rpb24gZSgpe3JldHVybiBpKCkud3JhcCgoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6Y29uc29sZS5sb2coIm9uVXBncmFkZSBpbnNpZGUgTW9kVGVtcGxhdGUuLi4iKTtjYXNlIDQ6Y2FzZSJlbmQiOnJldHVybiBlLnN0b3AoKX19KSxlKX0pKSksZnVuY3Rpb24oKXtyZXR1cm4gcy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleToiaGFzU2VlblRyYW5zYWN0aW9uIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLm5hbWUrZS5zaWduYXR1cmU7cmV0dXJuISF0aGlzLnByb2Nlc3NlZFR4c1t0XXx8KHRoaXMucHJvY2Vzc2VkVHhzW3RdPSEwLCExKX19XSxyPVt7a2V5OiJpbXBvcnRGdW5jdGlvbnMiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9dGhpcy5wcm90b3R5cGUsbj0wO248YXJndW1lbnRzLmxlbmd0aDtuKyspdm9pZCAwIT09KGU9YXJndW1lbnRzW25dLnByb3RvdHlwZSkmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpLmZvckVhY2goKGZ1bmN0aW9uKG4peyJjb25zdHJ1Y3RvciIhPW4mJihPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0KS5pbmNsdWRlcyhuKT9jb25zb2xlLmVycm9yKCJNb2R1bGUgYWxyZWFkeSBpbmNsdWRlcyAiK24pOnRbbl09ZVtuXSl9KSl9fV0sbiYmYyh0LnByb3RvdHlwZSxuKSxyJiZjKHQsciksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsInByb3RvdHlwZSIse3dyaXRhYmxlOiExfSksZX0oKTtlLmV4cG9ydHM9aH0sNzQzOihlLHQsbik9PntmdW5jdGlvbiByKGUpe3JldHVybiByPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSxyKGUpfWZ1bmN0aW9uIG8oZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGkoci5rZXkpLHIpfX1mdW5jdGlvbiBpKGUpe3ZhciB0PWZ1bmN0aW9uKGUsdCl7aWYoIm9iamVjdCIhPXIoZSl8fCFlKXJldHVybiBlO3ZhciBuPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgbz1uLmNhbGwoZSwic3RyaW5nIik7aWYoIm9iamVjdCIhPXIobykpcmV0dXJuIG87dGhyb3cgbmV3IFR5cGVFcnJvcigiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS4iKX1yZXR1cm4gU3RyaW5nKGUpfShlKTtyZXR1cm4ic3ltYm9sIj09cih0KT90OlN0cmluZyh0KX1mdW5jdGlvbiBzKCl7cmV0dXJuIHM9InVuZGVmaW5lZCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmdldD9SZWZsZWN0LmdldC5iaW5kKCk6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWZ1bmN0aW9uKGUsdCl7Zm9yKDshT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCkmJm51bGwhPT0oZT1sKGUpKTspO3JldHVybiBlfShlLHQpO2lmKHIpe3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KTtyZXR1cm4gby5nZXQ/by5nZXQuY2FsbChhcmd1bWVudHMubGVuZ3RoPDM/ZTpuKTpvLnZhbHVlfX0scy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gYShlLHQpe3JldHVybiBhPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuX19wcm90b19fPXQsZX0sYShlLHQpfWZ1bmN0aW9uIGMoZSx0KXtpZih0JiYoIm9iamVjdCI9PT1yKHQpfHwiZnVuY3Rpb24iPT10eXBlb2YgdCkpcmV0dXJuIHQ7aWYodm9pZCAwIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZCIpO3JldHVybiB1KGUpfWZ1bmN0aW9uIHUoZSl7aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiBlfWZ1bmN0aW9uIGwoZSl7cmV0dXJuIGw9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSl9LGwoZSl9dmFyIGY9bigyMjIpLGg9bigzNzcpLHA9ZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUsdCl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJwcm90b3R5cGUiLHt3cml0YWJsZTohMX0pLHQmJmEoZSx0KX0ocCxlKTt2YXIgdCxuLHIsaSxmPShyPXAsaT1mdW5jdGlvbigpe2lmKCJ1bmRlZmluZWQiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoImZ1bmN0aW9uIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCksZnVuY3Rpb24oKXt2YXIgZSx0PWwocik7aWYoaSl7dmFyIG49bCh0aGlzKS5jb25zdHJ1Y3RvcjtlPVJlZmxlY3QuY29uc3RydWN0KHQsYXJndW1lbnRzLG4pfWVsc2UgZT10LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gYyh0aGlzLGUpfSk7ZnVuY3Rpb24gcChlKXt2YXIgdDtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0odGhpcyxwKSwodD1mLmNhbGwodGhpcyxlKSkuYXBwPWUsdC5uYW1lPSJEZWJ1ZyIsdC5hcHBuYW1lPSJEZWJ1ZyIsdC5kZXNjcmlwdGlvbj0iRW1haWwgcGx1Z2luIHRoYXQgYWxsb3dzIHZpc3VhbCBleHBsb3JhdGlvbiBhbmQgZGVidWdnaW5nIG9mIHRoZSBTYWl0byB3YWxsZXQuIix0LmNhdGVnb3JpZXM9IlV0aWxpdGllcyBDb3JlIix0Lmljb249ImZhcyBmYS1jb2RlIix0LmRlc2NyaXB0aW9uPSJBIGRlYnVnIGNvbmZpZ3VyYXRpb24gZHVtcCBmb3IgU2FpdG8iLHQuY2F0ZWdvcmllcz0iRGV2IFV0aWxpdGllcyIsYyh0LHUodCkpfXJldHVybiB0PXAsKG49W3trZXk6InJlc3BvbmRUbyIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGNvbnNvbGUubG9nKCJkZWJ1Zy5yZXNwb25kVG8gOiAiK2UpLCJhcHBzcGFjZSI9PT1lPyh0aGlzLnN0eWxlcz1bIi9zYWl0by9saWIvanNvblRyZWUvanNvblRyZWUuY3NzIiwiL2RlYnVnL3N0eWxlLmNzcyJdLHMobChwLnByb3RvdHlwZSksInJlbmRlciIsdGhpcykuY2FsbCh0aGlzLHRoaXMuYXBwLHRoaXMpLG5ldyBoKHRoaXMuYXBwLHRoaXMpKTpudWxsfX0se2tleToiYXR0YWNoRXZlbnRzRW1haWwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7fX1dKSYmbyh0LnByb3RvdHlwZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCwicHJvdG90eXBlIix7d3JpdGFibGU6ITF9KSxwfShmKTtlLmV4cG9ydHM9cH0sMzc3OihlLHQsbik9PntmdW5jdGlvbiByKGUpe3JldHVybiByPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSxyKGUpfWZ1bmN0aW9uIG8oZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGkoci5rZXkpLHIpfX1mdW5jdGlvbiBpKGUpe3ZhciB0PWZ1bmN0aW9uKGUsdCl7aWYoIm9iamVjdCIhPXIoZSl8fCFlKXJldHVybiBlO3ZhciBuPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1uKXt2YXIgbz1uLmNhbGwoZSwic3RyaW5nIik7aWYoIm9iamVjdCIhPXIobykpcmV0dXJuIG87dGhyb3cgbmV3IFR5cGVFcnJvcigiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS4iKX1yZXR1cm4gU3RyaW5nKGUpfShlKTtyZXR1cm4ic3ltYm9sIj09cih0KT90OlN0cmluZyh0KX12YXIgcz1uKDQyNCksYT1uKDI5OCksYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsZSksdGhpcy5uYW1lPSJEZWJ1Z0FwcHNwYWNlTWFpbiJ9dmFyIHQsbjtyZXR1cm4gdD1lLChuPVt7a2V5OiJyZW5kZXIiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7Y29uc29sZS5sb2coInRlc3RpbmcgQSIpLGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5hcHBzcGFjZSIpLmlubmVySFRNTD1zKCk7dmFyIG49ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFwcHNwYWNlLWRlYnVnIik7dHJ5e2EuY3JlYXRlKEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZS5vcHRpb25zKSksbil9Y2F0Y2goZSl7Y29uc29sZS5sb2coImVycm9yIGNyZWF0aW5nIGpzb25UcmVlOiAiK2UpfX19LHtrZXk6ImF0dGFjaEV2ZW50cyIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt9fV0pJiZvKHQucHJvdG90eXBlLG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJwcm90b3R5cGUiLHt3cml0YWJsZTohMX0pLGV9KCk7ZS5leHBvcnRzPWN9LDQyNDplPT57ZS5leHBvcnRzPWZ1bmN0aW9uKCl7cmV0dXJuJ1xuICBcbiAgICA8ZGl2IGNsYXNzPSJzYWl0by1wYWdlLWhlYWRlciI+XG4gICAgICA8ZGl2IGlkPSJzYWl0by1wYWdlLWhlYWRlci10aXRsZSIgY2xhc3M9InNhaXRvLXBhZ2UtaGVhZGVyLXRpdGxlIj5ERUJVRyBXQUxMRVRcbiAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPGRpdiBpZD0iYXBwc3BhY2UtZGVidWciIGNsYXNzPSJhcHBzcGFjZS1kZWJ1ZyI+PC9kaXY+XG5cbiAgJ319LDUxODpmdW5jdGlvbihlLHQsbil7dmFyIHI7ZnVuY3Rpb24gbyhlKXtyZXR1cm4gbz0iZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYic3ltYm9sIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiYiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgZX0sbyhlKX0hZnVuY3Rpb24oaSl7InVzZSBzdHJpY3QiO3ZhciBzLGE9L14tPyg/OlxkKyg/OlwuXGQqKT98XC5cZCspKD86ZVsrLV0/XGQrKT8kL2ksYz1NYXRoLmNlaWwsdT1NYXRoLmZsb29yLGw9IltCaWdOdW1iZXIgRXJyb3JdICIsZj1sKyJOdW1iZXIgcHJpbWl0aXZlIGhhcyBtb3JlIHRoYW4gMTUgc2lnbmlmaWNhbnQgZGlnaXRzOiAiLGg9MWUxNCxwPTE0LGQ9OTAwNzE5OTI1NDc0MDk5MSx5PVsxLDEwLDEwMCwxZTMsMWU0LDFlNSwxZTYsMWU3LDFlOCwxZTksMWUxMCwxZTExLDFlMTIsMWUxM10sdj0xZTcsZz0xZTk7ZnVuY3Rpb24gbShlKXt2YXIgdD0wfGU7cmV0dXJuIGU+MHx8ZT09PXQ/dDp0LTF9ZnVuY3Rpb24gYihlKXtmb3IodmFyIHQsbixyPTEsbz1lLmxlbmd0aCxpPWVbMF0rIiI7cjxvOyl7Zm9yKHQ9ZVtyKytdKyIiLG49cC10Lmxlbmd0aDtuLS07dD0iMCIrdCk7aSs9dH1mb3Iobz1pLmxlbmd0aDs0OD09PWkuY2hhckNvZGVBdCgtLW8pOyk7cmV0dXJuIGkuc2xpY2UoMCxvKzF8fDEpfWZ1bmN0aW9uIHcoZSx0KXt2YXIgbixyLG89ZS5jLGk9dC5jLHM9ZS5zLGE9dC5zLGM9ZS5lLHU9dC5lO2lmKCFzfHwhYSlyZXR1cm4gbnVsbDtpZihuPW8mJiFvWzBdLHI9aSYmIWlbMF0sbnx8cilyZXR1cm4gbj9yPzA6LWE6cztpZihzIT1hKXJldHVybiBzO2lmKG49czwwLHI9Yz09dSwhb3x8IWkpcmV0dXJuIHI/MDohb15uPzE6LTE7aWYoIXIpcmV0dXJuIGM+dV5uPzE6LTE7Zm9yKGE9KGM9by5sZW5ndGgpPCh1PWkubGVuZ3RoKT9jOnUscz0wO3M8YTtzKyspaWYob1tzXSE9aVtzXSlyZXR1cm4gb1tzXT5pW3NdXm4/MTotMTtyZXR1cm4gYz09dT8wOmM+dV5uPzE6LTF9ZnVuY3Rpb24gUyhlLHQsbixyKXtpZihlPHR8fGU+bnx8ZSE9PXUoZSkpdGhyb3cgRXJyb3IobCsocnx8IkFyZ3VtZW50IikrKCJudW1iZXIiPT10eXBlb2YgZT9lPHR8fGU+bj8iIG91dCBvZiByYW5nZTogIjoiIG5vdCBhbiBpbnRlZ2VyOiAiOiIgbm90IGEgcHJpbWl0aXZlIG51bWJlcjogIikrU3RyaW5nKGUpKX1mdW5jdGlvbiBrKGUpe3ZhciB0PWUuYy5sZW5ndGgtMTtyZXR1cm4gbShlLmUvcCk9PXQmJmUuY1t0XSUyIT0wfWZ1bmN0aW9uIHgoZSx0KXtyZXR1cm4oZS5sZW5ndGg+MT9lLmNoYXJBdCgwKSsiLiIrZS5zbGljZSgxKTplKSsodDwwPyJlIjoiZSsiKSt0fWZ1bmN0aW9uIEUoZSx0LG4pe3ZhciByLG87aWYodDwwKXtmb3Iobz1uKyIuIjsrK3Q7bys9bik7ZT1vK2V9ZWxzZSBpZigrK3Q+KHI9ZS5sZW5ndGgpKXtmb3Iobz1uLHQtPXI7LS10O28rPW4pO2UrPW99ZWxzZSB0PHImJihlPWUuc2xpY2UoMCx0KSsiLiIrZS5zbGljZSh0KSk7cmV0dXJuIGV9cz1mdW5jdGlvbiBlKHQpe3ZhciBuLHIsaSxzLE8sQSxfLGosTixULEM9Si5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOkosdG9TdHJpbmc6bnVsbCx2YWx1ZU9mOm51bGx9LEw9bmV3IEooMSksUD0yMCxSPTQscT0tNyxJPTIxLEI9LTFlNyxNPTFlNyxEPSExLEY9MSxVPTAsRz17cHJlZml4OiIiLGdyb3VwU2l6ZTozLHNlY29uZGFyeUdyb3VwU2l6ZTowLGdyb3VwU2VwYXJhdG9yOiIsIixkZWNpbWFsU2VwYXJhdG9yOiIuIixmcmFjdGlvbkdyb3VwU2l6ZTowLGZyYWN0aW9uR3JvdXBTZXBhcmF0b3I6IsKgIixzdWZmaXg6IiJ9LEg9IjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eiIsej0hMDtmdW5jdGlvbiBKKGUsdCl7dmFyIG4sbyxzLGMsbCxoLHksdixnPXRoaXM7aWYoIShnIGluc3RhbmNlb2YgSikpcmV0dXJuIG5ldyBKKGUsdCk7aWYobnVsbD09dCl7aWYoZSYmITA9PT1lLl9pc0JpZ051bWJlcilyZXR1cm4gZy5zPWUucyx2b2lkKCFlLmN8fGUuZT5NP2cuYz1nLmU9bnVsbDplLmU8Qj9nLmM9W2cuZT0wXTooZy5lPWUuZSxnLmM9ZS5jLnNsaWNlKCkpKTtpZigoaD0ibnVtYmVyIj09dHlwZW9mIGUpJiYwKmU9PTApe2lmKGcucz0xL2U8MD8oZT0tZSwtMSk6MSxlPT09fn5lKXtmb3IoYz0wLGw9ZTtsPj0xMDtsLz0xMCxjKyspO3JldHVybiB2b2lkKGM+TT9nLmM9Zy5lPW51bGw6KGcuZT1jLGcuYz1bZV0pKX12PVN0cmluZyhlKX1lbHNle2lmKCFhLnRlc3Qodj1TdHJpbmcoZSkpKXJldHVybiBpKGcsdixoKTtnLnM9NDU9PXYuY2hhckNvZGVBdCgwKT8odj12LnNsaWNlKDEpLC0xKToxfShjPXYuaW5kZXhPZigiLiIpKT4tMSYmKHY9di5yZXBsYWNlKCIuIiwiIikpLChsPXYuc2VhcmNoKC9lL2kpKT4wPyhjPDAmJihjPWwpLGMrPSt2LnNsaWNlKGwrMSksdj12LnN1YnN0cmluZygwLGwpKTpjPDAmJihjPXYubGVuZ3RoKX1lbHNle2lmKFModCwyLEgubGVuZ3RoLCJCYXNlIiksMTA9PXQmJnopcmV0dXJuIFYoZz1uZXcgSihlKSxQK2cuZSsxLFIpO2lmKHY9U3RyaW5nKGUpLGg9Im51bWJlciI9PXR5cGVvZiBlKXtpZigwKmUhPTApcmV0dXJuIGkoZyx2LGgsdCk7aWYoZy5zPTEvZTwwPyh2PXYuc2xpY2UoMSksLTEpOjEsSi5ERUJVRyYmdi5yZXBsYWNlKC9eMFwuMCp8XC4vLCIiKS5sZW5ndGg+MTUpdGhyb3cgRXJyb3IoZitlKX1lbHNlIGcucz00NT09PXYuY2hhckNvZGVBdCgwKT8odj12LnNsaWNlKDEpLC0xKToxO2ZvcihuPUguc2xpY2UoMCx0KSxjPWw9MCx5PXYubGVuZ3RoO2w8eTtsKyspaWYobi5pbmRleE9mKG89di5jaGFyQXQobCkpPDApe2lmKCIuIj09byl7aWYobD5jKXtjPXk7Y29udGludWV9fWVsc2UgaWYoIXMmJih2PT12LnRvVXBwZXJDYXNlKCkmJih2PXYudG9Mb3dlckNhc2UoKSl8fHY9PXYudG9Mb3dlckNhc2UoKSYmKHY9di50b1VwcGVyQ2FzZSgpKSkpe3M9ITAsbD0tMSxjPTA7Y29udGludWV9cmV0dXJuIGkoZyxTdHJpbmcoZSksaCx0KX1oPSExLChjPSh2PXIodix0LDEwLGcucykpLmluZGV4T2YoIi4iKSk+LTE/dj12LnJlcGxhY2UoIi4iLCIiKTpjPXYubGVuZ3RofWZvcihsPTA7NDg9PT12LmNoYXJDb2RlQXQobCk7bCsrKTtmb3IoeT12Lmxlbmd0aDs0OD09PXYuY2hhckNvZGVBdCgtLXkpOyk7aWYodj12LnNsaWNlKGwsKyt5KSl7aWYoeS09bCxoJiZKLkRFQlVHJiZ5PjE1JiYoZT5kfHxlIT09dShlKSkpdGhyb3cgRXJyb3IoZitnLnMqZSk7aWYoKGM9Yy1sLTEpPk0pZy5jPWcuZT1udWxsO2Vsc2UgaWYoYzxCKWcuYz1bZy5lPTBdO2Vsc2V7aWYoZy5lPWMsZy5jPVtdLGw9KGMrMSklcCxjPDAmJihsKz1wKSxsPHkpe2ZvcihsJiZnLmMucHVzaCgrdi5zbGljZSgwLGwpKSx5LT1wO2w8eTspZy5jLnB1c2goK3Yuc2xpY2UobCxsKz1wKSk7bD1wLSh2PXYuc2xpY2UobCkpLmxlbmd0aH1lbHNlIGwtPXk7Zm9yKDtsLS07dis9IjAiKTtnLmMucHVzaCgrdil9fWVsc2UgZy5jPVtnLmU9MF19ZnVuY3Rpb24gJChlLHQsbixyKXt2YXIgbyxpLHMsYSxjO2lmKG51bGw9PW4/bj1SOlMobiwwLDgpLCFlLmMpcmV0dXJuIGUudG9TdHJpbmcoKTtpZihvPWUuY1swXSxzPWUuZSxudWxsPT10KWM9YihlLmMpLGM9MT09cnx8Mj09ciYmKHM8PXF8fHM+PUkpP3goYyxzKTpFKGMscywiMCIpO2Vsc2UgaWYoaT0oZT1WKG5ldyBKKGUpLHQsbikpLmUsYT0oYz1iKGUuYykpLmxlbmd0aCwxPT1yfHwyPT1yJiYodDw9aXx8aTw9cSkpe2Zvcig7YTx0O2MrPSIwIixhKyspO2M9eChjLGkpfWVsc2UgaWYodC09cyxjPUUoYyxpLCIwIiksaSsxPmEpe2lmKC0tdD4wKWZvcihjKz0iLiI7dC0tO2MrPSIwIik7fWVsc2UgaWYoKHQrPWktYSk+MClmb3IoaSsxPT1hJiYoYys9Ii4iKTt0LS07Yys9IjAiKTtyZXR1cm4gZS5zPDAmJm8/Ii0iK2M6Y31mdW5jdGlvbiBXKGUsdCl7Zm9yKHZhciBuLHIsbz0xLGk9bmV3IEooZVswXSk7bzxlLmxlbmd0aDtvKyspKCEocj1uZXcgSihlW29dKSkuc3x8KG49dyhpLHIpKT09PXR8fDA9PT1uJiZpLnM9PT10KSYmKGk9cik7cmV0dXJuIGl9ZnVuY3Rpb24gSyhlLHQsbil7Zm9yKHZhciByPTEsbz10Lmxlbmd0aDshdFstLW9dO3QucG9wKCkpO2ZvcihvPXRbMF07bz49MTA7by89MTAscisrKTtyZXR1cm4obj1yK24qcC0xKT5NP2UuYz1lLmU9bnVsbDpuPEI/ZS5jPVtlLmU9MF06KGUuZT1uLGUuYz10KSxlfWZ1bmN0aW9uIFYoZSx0LG4scil7dmFyIG8saSxzLGEsbCxmLGQsdj1lLmMsZz15O2lmKHYpe2U6e2ZvcihvPTEsYT12WzBdO2E+PTEwO2EvPTEwLG8rKyk7aWYoKGk9dC1vKTwwKWkrPXAscz10LGw9dltmPTBdLGQ9dShsL2dbby1zLTFdJTEwKTtlbHNlIGlmKChmPWMoKGkrMSkvcCkpPj12Lmxlbmd0aCl7aWYoIXIpYnJlYWsgZTtmb3IoO3YubGVuZ3RoPD1mO3YucHVzaCgwKSk7bD1kPTAsbz0xLHM9KGklPXApLXArMX1lbHNle2ZvcihsPWE9dltmXSxvPTE7YT49MTA7YS89MTAsbysrKTtkPShzPShpJT1wKS1wK28pPDA/MDp1KGwvZ1tvLXMtMV0lMTApfWlmKHI9cnx8dDwwfHxudWxsIT12W2YrMV18fChzPDA/bDpsJWdbby1zLTFdKSxyPW48ND8oZHx8cikmJigwPT1ufHxuPT0oZS5zPDA/MzoyKSk6ZD41fHw1PT1kJiYoND09bnx8cnx8Nj09biYmKGk+MD9zPjA/bC9nW28tc106MDp2W2YtMV0pJTEwJjF8fG49PShlLnM8MD84OjcpKSx0PDF8fCF2WzBdKXJldHVybiB2Lmxlbmd0aD0wLHI/KHQtPWUuZSsxLHZbMF09Z1socC10JXApJXBdLGUuZT0tdHx8MCk6dlswXT1lLmU9MCxlO2lmKDA9PWk/KHYubGVuZ3RoPWYsYT0xLGYtLSk6KHYubGVuZ3RoPWYrMSxhPWdbcC1pXSx2W2ZdPXM+MD91KGwvZ1tvLXNdJWdbc10pKmE6MCkscilmb3IoOzspe2lmKDA9PWYpe2ZvcihpPTEscz12WzBdO3M+PTEwO3MvPTEwLGkrKyk7Zm9yKHM9dlswXSs9YSxhPTE7cz49MTA7cy89MTAsYSsrKTtpIT1hJiYoZS5lKyssdlswXT09aCYmKHZbMF09MSkpO2JyZWFrfWlmKHZbZl0rPWEsdltmXSE9aClicmVhazt2W2YtLV09MCxhPTF9Zm9yKGk9di5sZW5ndGg7MD09PXZbLS1pXTt2LnBvcCgpKTt9ZS5lPk0/ZS5jPWUuZT1udWxsOmUuZTxCJiYoZS5jPVtlLmU9MF0pfXJldHVybiBlfWZ1bmN0aW9uIFkoZSl7dmFyIHQsbj1lLmU7cmV0dXJuIG51bGw9PT1uP2UudG9TdHJpbmcoKToodD1iKGUuYyksdD1uPD1xfHxuPj1JP3godCxuKTpFKHQsbiwiMCIpLGUuczwwPyItIit0OnQpfXJldHVybiBKLmNsb25lPWUsSi5ST1VORF9VUD0wLEouUk9VTkRfRE9XTj0xLEouUk9VTkRfQ0VJTD0yLEouUk9VTkRfRkxPT1I9MyxKLlJPVU5EX0hBTEZfVVA9NCxKLlJPVU5EX0hBTEZfRE9XTj01LEouUk9VTkRfSEFMRl9FVkVOPTYsSi5ST1VORF9IQUxGX0NFSUw9NyxKLlJPVU5EX0hBTEZfRkxPT1I9OCxKLkVVQ0xJRD05LEouY29uZmlnPUouc2V0PWZ1bmN0aW9uKGUpe3ZhciB0LG47aWYobnVsbCE9ZSl7aWYoIm9iamVjdCIhPW8oZSkpdGhyb3cgRXJyb3IobCsiT2JqZWN0IGV4cGVjdGVkOiAiK2UpO2lmKGUuaGFzT3duUHJvcGVydHkodD0iREVDSU1BTF9QTEFDRVMiKSYmKFMobj1lW3RdLDAsZyx0KSxQPW4pLGUuaGFzT3duUHJvcGVydHkodD0iUk9VTkRJTkdfTU9ERSIpJiYoUyhuPWVbdF0sMCw4LHQpLFI9biksZS5oYXNPd25Qcm9wZXJ0eSh0PSJFWFBPTkVOVElBTF9BVCIpJiYoKG49ZVt0XSkmJm4ucG9wPyhTKG5bMF0sLWcsMCx0KSxTKG5bMV0sMCxnLHQpLHE9blswXSxJPW5bMV0pOihTKG4sLWcsZyx0KSxxPS0oST1uPDA/LW46bikpKSxlLmhhc093blByb3BlcnR5KHQ9IlJBTkdFIikpaWYoKG49ZVt0XSkmJm4ucG9wKVMoblswXSwtZywtMSx0KSxTKG5bMV0sMSxnLHQpLEI9blswXSxNPW5bMV07ZWxzZXtpZihTKG4sLWcsZyx0KSwhbil0aHJvdyBFcnJvcihsK3QrIiBjYW5ub3QgYmUgemVybzogIituKTtCPS0oTT1uPDA/LW46bil9aWYoZS5oYXNPd25Qcm9wZXJ0eSh0PSJDUllQVE8iKSl7aWYoKG49ZVt0XSkhPT0hIW4pdGhyb3cgRXJyb3IobCt0KyIgbm90IHRydWUgb3IgZmFsc2U6ICIrbik7aWYobil7aWYoInVuZGVmaW5lZCI9PXR5cGVvZiBjcnlwdG98fCFjcnlwdG98fCFjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzJiYhY3J5cHRvLnJhbmRvbUJ5dGVzKXRocm93IEQ9IW4sRXJyb3IobCsiY3J5cHRvIHVuYXZhaWxhYmxlIik7RD1ufWVsc2UgRD1ufWlmKGUuaGFzT3duUHJvcGVydHkodD0iTU9EVUxPX01PREUiKSYmKFMobj1lW3RdLDAsOSx0KSxGPW4pLGUuaGFzT3duUHJvcGVydHkodD0iUE9XX1BSRUNJU0lPTiIpJiYoUyhuPWVbdF0sMCxnLHQpLFU9biksZS5oYXNPd25Qcm9wZXJ0eSh0PSJGT1JNQVQiKSl7aWYoIm9iamVjdCIhPW8obj1lW3RdKSl0aHJvdyBFcnJvcihsK3QrIiBub3QgYW4gb2JqZWN0OiAiK24pO0c9bn1pZihlLmhhc093blByb3BlcnR5KHQ9IkFMUEhBQkVUIikpe2lmKCJzdHJpbmciIT10eXBlb2Yobj1lW3RdKXx8L14uPyR8WytcLS5cc118KC4pLipcMS8udGVzdChuKSl0aHJvdyBFcnJvcihsK3QrIiBpbnZhbGlkOiAiK24pO3o9IjAxMjM0NTY3ODkiPT1uLnNsaWNlKDAsMTApLEg9bn19cmV0dXJue0RFQ0lNQUxfUExBQ0VTOlAsUk9VTkRJTkdfTU9ERTpSLEVYUE9ORU5USUFMX0FUOltxLEldLFJBTkdFOltCLE1dLENSWVBUTzpELE1PRFVMT19NT0RFOkYsUE9XX1BSRUNJU0lPTjpVLEZPUk1BVDpHLEFMUEhBQkVUOkh9fSxKLmlzQmlnTnVtYmVyPWZ1bmN0aW9uKGUpe2lmKCFlfHwhMCE9PWUuX2lzQmlnTnVtYmVyKXJldHVybiExO2lmKCFKLkRFQlVHKXJldHVybiEwO3ZhciB0LG4scj1lLmMsbz1lLmUsaT1lLnM7ZTppZigiW29iamVjdCBBcnJheV0iPT17fS50b1N0cmluZy5jYWxsKHIpKXtpZigoMT09PWl8fC0xPT09aSkmJm8+PS1nJiZvPD1nJiZvPT09dShvKSl7aWYoMD09PXJbMF0pe2lmKDA9PT1vJiYxPT09ci5sZW5ndGgpcmV0dXJuITA7YnJlYWsgZX1pZigodD0obysxKSVwKTwxJiYodCs9cCksU3RyaW5nKHJbMF0pLmxlbmd0aD09dCl7Zm9yKHQ9MDt0PHIubGVuZ3RoO3QrKylpZigobj1yW3RdKTwwfHxuPj1ofHxuIT09dShuKSlicmVhayBlO2lmKDAhPT1uKXJldHVybiEwfX19ZWxzZSBpZihudWxsPT09ciYmbnVsbD09PW8mJihudWxsPT09aXx8MT09PWl8fC0xPT09aSkpcmV0dXJuITA7dGhyb3cgRXJyb3IobCsiSW52YWxpZCBCaWdOdW1iZXI6ICIrZSl9LEoubWF4aW11bT1KLm1heD1mdW5jdGlvbigpe3JldHVybiBXKGFyZ3VtZW50cywtMSl9LEoubWluaW11bT1KLm1pbj1mdW5jdGlvbigpe3JldHVybiBXKGFyZ3VtZW50cywxKX0sSi5yYW5kb209KHM9OTAwNzE5OTI1NDc0MDk5MixPPU1hdGgucmFuZG9tKCkqcyYyMDk3MTUxP2Z1bmN0aW9uKCl7cmV0dXJuIHUoTWF0aC5yYW5kb20oKSpzKX06ZnVuY3Rpb24oKXtyZXR1cm4gODM4ODYwOCooMTA3Mzc0MTgyNCpNYXRoLnJhbmRvbSgpfDApKyg4Mzg4NjA4Kk1hdGgucmFuZG9tKCl8MCl9LGZ1bmN0aW9uKGUpe3ZhciB0LG4scixvLGkscz0wLGE9W10sZj1uZXcgSihMKTtpZihudWxsPT1lP2U9UDpTKGUsMCxnKSxvPWMoZS9wKSxEKWlmKGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpe2Zvcih0PWNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KG8qPTIpKTtzPG87KShpPTEzMTA3Mip0W3NdKyh0W3MrMV0+Pj4xMSkpPj05ZTE1PyhuPWNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDIpKSx0W3NdPW5bMF0sdFtzKzFdPW5bMV0pOihhLnB1c2goaSUxZTE0KSxzKz0yKTtzPW8vMn1lbHNle2lmKCFjcnlwdG8ucmFuZG9tQnl0ZXMpdGhyb3cgRD0hMSxFcnJvcihsKyJjcnlwdG8gdW5hdmFpbGFibGUiKTtmb3IodD1jcnlwdG8ucmFuZG9tQnl0ZXMobyo9Nyk7czxvOykoaT0yODE0NzQ5NzY3MTA2NTYqKDMxJnRbc10pKzEwOTk1MTE2Mjc3NzYqdFtzKzFdKzQyOTQ5NjcyOTYqdFtzKzJdKzE2Nzc3MjE2KnRbcyszXSsodFtzKzRdPDwxNikrKHRbcys1XTw8OCkrdFtzKzZdKT49OWUxNT9jcnlwdG8ucmFuZG9tQnl0ZXMoNykuY29weSh0LHMpOihhLnB1c2goaSUxZTE0KSxzKz03KTtzPW8vN31pZighRClmb3IoO3M8bzspKGk9TygpKTw5ZTE1JiYoYVtzKytdPWklMWUxNCk7Zm9yKG89YVstLXNdLGUlPXAsbyYmZSYmKGk9eVtwLWVdLGFbc109dShvL2kpKmkpOzA9PT1hW3NdO2EucG9wKCkscy0tKTtpZihzPDApYT1bcj0wXTtlbHNle2ZvcihyPS0xOzA9PT1hWzBdO2Euc3BsaWNlKDAsMSksci09cCk7Zm9yKHM9MSxpPWFbMF07aT49MTA7aS89MTAscysrKTtzPHAmJihyLT1wLXMpfXJldHVybiBmLmU9cixmLmM9YSxmfSksSi5zdW09ZnVuY3Rpb24oKXtmb3IodmFyIGU9MSx0PWFyZ3VtZW50cyxuPW5ldyBKKHRbMF0pO2U8dC5sZW5ndGg7KW49bi5wbHVzKHRbZSsrXSk7cmV0dXJuIG59LHI9ZnVuY3Rpb24oKXt2YXIgZT0iMDEyMzQ1Njc4OSI7ZnVuY3Rpb24gdChlLHQsbixyKXtmb3IodmFyIG8saSxzPVswXSxhPTAsYz1lLmxlbmd0aDthPGM7KXtmb3IoaT1zLmxlbmd0aDtpLS07c1tpXSo9dCk7Zm9yKHNbMF0rPXIuaW5kZXhPZihlLmNoYXJBdChhKyspKSxvPTA7bzxzLmxlbmd0aDtvKyspc1tvXT5uLTEmJihudWxsPT1zW28rMV0mJihzW28rMV09MCksc1tvKzFdKz1zW29dL258MCxzW29dJT1uKX1yZXR1cm4gcy5yZXZlcnNlKCl9cmV0dXJuIGZ1bmN0aW9uKHIsbyxpLHMsYSl7dmFyIGMsdSxsLGYsaCxwLGQseSx2PXIuaW5kZXhPZigiLiIpLGc9UCxtPVI7Zm9yKHY+PTAmJihmPVUsVT0wLHI9ci5yZXBsYWNlKCIuIiwiIikscD0oeT1uZXcgSihvKSkucG93KHIubGVuZ3RoLXYpLFU9Zix5LmM9dChFKGIocC5jKSxwLmUsIjAiKSwxMCxpLGUpLHkuZT15LmMubGVuZ3RoKSxsPWY9KGQ9dChyLG8saSxhPyhjPUgsZSk6KGM9ZSxIKSkpLmxlbmd0aDswPT1kWy0tZl07ZC5wb3AoKSk7aWYoIWRbMF0pcmV0dXJuIGMuY2hhckF0KDApO2lmKHY8MD8tLWw6KHAuYz1kLHAuZT1sLHAucz1zLGQ9KHA9bihwLHksZyxtLGkpKS5jLGg9cC5yLGw9cC5lKSx2PWRbdT1sK2crMV0sZj1pLzIsaD1ofHx1PDB8fG51bGwhPWRbdSsxXSxoPW08ND8obnVsbCE9dnx8aCkmJigwPT1tfHxtPT0ocC5zPDA/MzoyKSk6dj5mfHx2PT1mJiYoND09bXx8aHx8Nj09bSYmMSZkW3UtMV18fG09PShwLnM8MD84OjcpKSx1PDF8fCFkWzBdKXI9aD9FKGMuY2hhckF0KDEpLC1nLGMuY2hhckF0KDApKTpjLmNoYXJBdCgwKTtlbHNle2lmKGQubGVuZ3RoPXUsaClmb3IoLS1pOysrZFstLXVdPmk7KWRbdV09MCx1fHwoKytsLGQ9WzFdLmNvbmNhdChkKSk7Zm9yKGY9ZC5sZW5ndGg7IWRbLS1mXTspO2Zvcih2PTAscj0iIjt2PD1mO3IrPWMuY2hhckF0KGRbdisrXSkpO3I9RShyLGwsYy5jaGFyQXQoMCkpfXJldHVybiByfX0oKSxuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbil7dmFyIHIsbyxpLHMsYT0wLGM9ZS5sZW5ndGgsdT10JXYsbD10L3Z8MDtmb3IoZT1lLnNsaWNlKCk7Yy0tOylhPSgobz11KihpPWVbY10ldikrKHI9bCppKyhzPWVbY10vdnwwKSp1KSV2KnYrYSkvbnwwKSsoci92fDApK2wqcyxlW2NdPW8lbjtyZXR1cm4gYSYmKGU9W2FdLmNvbmNhdChlKSksZX1mdW5jdGlvbiB0KGUsdCxuLHIpe3ZhciBvLGk7aWYobiE9cilpPW4+cj8xOi0xO2Vsc2UgZm9yKG89aT0wO288bjtvKyspaWYoZVtvXSE9dFtvXSl7aT1lW29dPnRbb10/MTotMTticmVha31yZXR1cm4gaX1mdW5jdGlvbiBuKGUsdCxuLHIpe2Zvcih2YXIgbz0wO24tLTspZVtuXS09byxvPWVbbl08dFtuXT8xOjAsZVtuXT1vKnIrZVtuXS10W25dO2Zvcig7IWVbMF0mJmUubGVuZ3RoPjE7ZS5zcGxpY2UoMCwxKSk7fXJldHVybiBmdW5jdGlvbihyLG8saSxzLGEpe3ZhciBjLGwsZixkLHksdixnLGIsdyxTLGsseCxFLE8sQSxfLGosTj1yLnM9PW8ucz8xOi0xLFQ9ci5jLEM9by5jO2lmKCEoVCYmVFswXSYmQyYmQ1swXSkpcmV0dXJuIG5ldyBKKHIucyYmby5zJiYoVD8hQ3x8VFswXSE9Q1swXTpDKT9UJiYwPT1UWzBdfHwhQz8wKk46Ti8wOk5hTik7Zm9yKHc9KGI9bmV3IEooTikpLmM9W10sTj1pKyhsPXIuZS1vLmUpKzEsYXx8KGE9aCxsPW0oci5lL3ApLW0oby5lL3ApLE49Ti9wfDApLGY9MDtDW2ZdPT0oVFtmXXx8MCk7ZisrKTtpZihDW2ZdPihUW2ZdfHwwKSYmbC0tLE48MCl3LnB1c2goMSksZD0hMDtlbHNle2ZvcihPPVQubGVuZ3RoLF89Qy5sZW5ndGgsZj0wLE4rPTIsKHk9dShhLyhDWzBdKzEpKSk+MSYmKEM9ZShDLHksYSksVD1lKFQseSxhKSxfPUMubGVuZ3RoLE89VC5sZW5ndGgpLEU9XyxrPShTPVQuc2xpY2UoMCxfKSkubGVuZ3RoO2s8XztTW2srK109MCk7aj1DLnNsaWNlKCksaj1bMF0uY29uY2F0KGopLEE9Q1swXSxDWzFdPj1hLzImJkErKztkb3tpZih5PTAsKGM9dChDLFMsXyxrKSk8MCl7aWYoeD1TWzBdLF8hPWsmJih4PXgqYSsoU1sxXXx8MCkpLCh5PXUoeC9BKSk+MSlmb3IoeT49YSYmKHk9YS0xKSxnPSh2PWUoQyx5LGEpKS5sZW5ndGgsaz1TLmxlbmd0aDsxPT10KHYsUyxnLGspOyl5LS0sbih2LF88Zz9qOkMsZyxhKSxnPXYubGVuZ3RoLGM9MTtlbHNlIDA9PXkmJihjPXk9MSksZz0odj1DLnNsaWNlKCkpLmxlbmd0aDtpZihnPGsmJih2PVswXS5jb25jYXQodikpLG4oUyx2LGssYSksaz1TLmxlbmd0aCwtMT09Yylmb3IoO3QoQyxTLF8sayk8MTspeSsrLG4oUyxfPGs/ajpDLGssYSksaz1TLmxlbmd0aH1lbHNlIDA9PT1jJiYoeSsrLFM9WzBdKTt3W2YrK109eSxTWzBdP1NbaysrXT1UW0VdfHwwOihTPVtUW0VdXSxrPTEpfXdoaWxlKChFKys8T3x8bnVsbCE9U1swXSkmJk4tLSk7ZD1udWxsIT1TWzBdLHdbMF18fHcuc3BsaWNlKDAsMSl9aWYoYT09aCl7Zm9yKGY9MSxOPXdbMF07Tj49MTA7Ti89MTAsZisrKTtWKGIsaSsoYi5lPWYrbCpwLTEpKzEscyxkKX1lbHNlIGIuZT1sLGIucj0rZDtyZXR1cm4gYn19KCksQT0vXigtPykwKFt4Ym9dKSg/PVx3W1x3Ll0qJCkvaSxfPS9eKFteLl0rKVwuJC8saj0vXlwuKFteLl0rKSQvLE49L14tPyhJbmZpbml0eXxOYU4pJC8sVD0vXlxzKlwrKD89W1x3Ll0pfF5ccyt8XHMrJC9nLGk9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG8saT1uP3Q6dC5yZXBsYWNlKFQsIiIpO2lmKE4udGVzdChpKSllLnM9aXNOYU4oaSk/bnVsbDppPDA/LTE6MTtlbHNle2lmKCFuJiYoaT1pLnJlcGxhY2UoQSwoZnVuY3Rpb24oZSx0LG4pe3JldHVybiBvPSJ4Ij09KG49bi50b0xvd2VyQ2FzZSgpKT8xNjoiYiI9PW4/Mjo4LHImJnIhPW8/ZTp0fSkpLHImJihvPXIsaT1pLnJlcGxhY2UoXywiJDEiKS5yZXBsYWNlKGosIjAuJDEiKSksdCE9aSkpcmV0dXJuIG5ldyBKKGksbyk7aWYoSi5ERUJVRyl0aHJvdyBFcnJvcihsKyJOb3QgYSIrKHI/IiBiYXNlICIrcjoiIikrIiBudW1iZXI6ICIrdCk7ZS5zPW51bGx9ZS5jPWUuZT1udWxsfSxDLmFic29sdXRlVmFsdWU9Qy5hYnM9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgSih0aGlzKTtyZXR1cm4gZS5zPDAmJihlLnM9MSksZX0sQy5jb21wYXJlZFRvPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHcodGhpcyxuZXcgSihlLHQpKX0sQy5kZWNpbWFsUGxhY2VzPUMuZHA9ZnVuY3Rpb24oZSx0KXt2YXIgbixyLG8saT10aGlzO2lmKG51bGwhPWUpcmV0dXJuIFMoZSwwLGcpLG51bGw9PXQ/dD1SOlModCwwLDgpLFYobmV3IEooaSksZStpLmUrMSx0KTtpZighKG49aS5jKSlyZXR1cm4gbnVsbDtpZihyPSgobz1uLmxlbmd0aC0xKS1tKHRoaXMuZS9wKSkqcCxvPW5bb10pZm9yKDtvJTEwPT0wO28vPTEwLHItLSk7cmV0dXJuIHI8MCYmKHI9MCkscn0sQy5kaXZpZGVkQnk9Qy5kaXY9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbih0aGlzLG5ldyBKKGUsdCksUCxSKX0sQy5kaXZpZGVkVG9JbnRlZ2VyQnk9Qy5pZGl2PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4odGhpcyxuZXcgSihlLHQpLDAsMSl9LEMuZXhwb25lbnRpYXRlZEJ5PUMucG93PWZ1bmN0aW9uKGUsdCl7dmFyIG4scixvLGkscyxhLGYsaCxkPXRoaXM7aWYoKGU9bmV3IEooZSkpLmMmJiFlLmlzSW50ZWdlcigpKXRocm93IEVycm9yKGwrIkV4cG9uZW50IG5vdCBhbiBpbnRlZ2VyOiAiK1koZSkpO2lmKG51bGwhPXQmJih0PW5ldyBKKHQpKSxzPWUuZT4xNCwhZC5jfHwhZC5jWzBdfHwxPT1kLmNbMF0mJiFkLmUmJjE9PWQuYy5sZW5ndGh8fCFlLmN8fCFlLmNbMF0pcmV0dXJuIGg9bmV3IEooTWF0aC5wb3coK1koZCkscz9lLnMqKDItayhlKSk6K1koZSkpKSx0P2gubW9kKHQpOmg7aWYoYT1lLnM8MCx0KXtpZih0LmM/IXQuY1swXTohdC5zKXJldHVybiBuZXcgSihOYU4pOyhyPSFhJiZkLmlzSW50ZWdlcigpJiZ0LmlzSW50ZWdlcigpKSYmKGQ9ZC5tb2QodCkpfWVsc2V7aWYoZS5lPjkmJihkLmU+MHx8ZC5lPC0xfHwoMD09ZC5lP2QuY1swXT4xfHxzJiZkLmNbMV0+PTI0ZTc6ZC5jWzBdPDhlMTN8fHMmJmQuY1swXTw9OTk5OTk3NWU3KSkpcmV0dXJuIGk9ZC5zPDAmJmsoZSk/LTA6MCxkLmU+LTEmJihpPTEvaSksbmV3IEooYT8xL2k6aSk7VSYmKGk9YyhVL3ArMikpfWZvcihzPyhuPW5ldyBKKC41KSxhJiYoZS5zPTEpLGY9ayhlKSk6Zj0obz1NYXRoLmFicygrWShlKSkpJTIsaD1uZXcgSihMKTs7KXtpZihmKXtpZighKGg9aC50aW1lcyhkKSkuYylicmVhaztpP2guYy5sZW5ndGg+aSYmKGguYy5sZW5ndGg9aSk6ciYmKGg9aC5tb2QodCkpfWlmKG8pe2lmKDA9PT0obz11KG8vMikpKWJyZWFrO2Y9byUyfWVsc2UgaWYoVihlPWUudGltZXMobiksZS5lKzEsMSksZS5lPjE0KWY9ayhlKTtlbHNle2lmKDA9PShvPStZKGUpKSlicmVhaztmPW8lMn1kPWQudGltZXMoZCksaT9kLmMmJmQuYy5sZW5ndGg+aSYmKGQuYy5sZW5ndGg9aSk6ciYmKGQ9ZC5tb2QodCkpfXJldHVybiByP2g6KGEmJihoPUwuZGl2KGgpKSx0P2gubW9kKHQpOmk/VihoLFUsUix2b2lkIDApOmgpfSxDLmludGVnZXJWYWx1ZT1mdW5jdGlvbihlKXt2YXIgdD1uZXcgSih0aGlzKTtyZXR1cm4gbnVsbD09ZT9lPVI6UyhlLDAsOCksVih0LHQuZSsxLGUpfSxDLmlzRXF1YWxUbz1DLmVxPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIDA9PT13KHRoaXMsbmV3IEooZSx0KSl9LEMuaXNGaW5pdGU9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuY30sQy5pc0dyZWF0ZXJUaGFuPUMuZ3Q9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdyh0aGlzLG5ldyBKKGUsdCkpPjB9LEMuaXNHcmVhdGVyVGhhbk9yRXF1YWxUbz1DLmd0ZT1mdW5jdGlvbihlLHQpe3JldHVybiAxPT09KHQ9dyh0aGlzLG5ldyBKKGUsdCkpKXx8MD09PXR9LEMuaXNJbnRlZ2VyPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmMmJm0odGhpcy5lL3ApPnRoaXMuYy5sZW5ndGgtMn0sQy5pc0xlc3NUaGFuPUMubHQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdyh0aGlzLG5ldyBKKGUsdCkpPDB9LEMuaXNMZXNzVGhhbk9yRXF1YWxUbz1DLmx0ZT1mdW5jdGlvbihlLHQpe3JldHVybi0xPT09KHQ9dyh0aGlzLG5ldyBKKGUsdCkpKXx8MD09PXR9LEMuaXNOYU49ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5zfSxDLmlzTmVnYXRpdmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zPDB9LEMuaXNQb3NpdGl2ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnM+MH0sQy5pc1plcm89ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuYyYmMD09dGhpcy5jWzBdfSxDLm1pbnVzPWZ1bmN0aW9uKGUsdCl7dmFyIG4scixvLGkscz10aGlzLGE9cy5zO2lmKHQ9KGU9bmV3IEooZSx0KSkucywhYXx8IXQpcmV0dXJuIG5ldyBKKE5hTik7aWYoYSE9dClyZXR1cm4gZS5zPS10LHMucGx1cyhlKTt2YXIgYz1zLmUvcCx1PWUuZS9wLGw9cy5jLGY9ZS5jO2lmKCFjfHwhdSl7aWYoIWx8fCFmKXJldHVybiBsPyhlLnM9LXQsZSk6bmV3IEooZj9zOk5hTik7aWYoIWxbMF18fCFmWzBdKXJldHVybiBmWzBdPyhlLnM9LXQsZSk6bmV3IEoobFswXT9zOjM9PVI/LTA6MCl9aWYoYz1tKGMpLHU9bSh1KSxsPWwuc2xpY2UoKSxhPWMtdSl7Zm9yKChpPWE8MCk/KGE9LWEsbz1sKToodT1jLG89Ziksby5yZXZlcnNlKCksdD1hO3QtLTtvLnB1c2goMCkpO28ucmV2ZXJzZSgpfWVsc2UgZm9yKHI9KGk9KGE9bC5sZW5ndGgpPCh0PWYubGVuZ3RoKSk/YTp0LGE9dD0wO3Q8cjt0KyspaWYobFt0XSE9Zlt0XSl7aT1sW3RdPGZbdF07YnJlYWt9aWYoaSYmKG89bCxsPWYsZj1vLGUucz0tZS5zKSwodD0ocj1mLmxlbmd0aCktKG49bC5sZW5ndGgpKT4wKWZvcig7dC0tO2xbbisrXT0wKTtmb3IodD1oLTE7cj5hOyl7aWYobFstLXJdPGZbcl0pe2ZvcihuPXI7biYmIWxbLS1uXTtsW25dPXQpOy0tbFtuXSxsW3JdKz1ofWxbcl0tPWZbcl19Zm9yKDswPT1sWzBdO2wuc3BsaWNlKDAsMSksLS11KTtyZXR1cm4gbFswXT9LKGUsbCx1KTooZS5zPTM9PVI/LTE6MSxlLmM9W2UuZT0wXSxlKX0sQy5tb2R1bG89Qy5tb2Q9ZnVuY3Rpb24oZSx0KXt2YXIgcixvLGk9dGhpcztyZXR1cm4gZT1uZXcgSihlLHQpLCFpLmN8fCFlLnN8fGUuYyYmIWUuY1swXT9uZXcgSihOYU4pOiFlLmN8fGkuYyYmIWkuY1swXT9uZXcgSihpKTooOT09Rj8obz1lLnMsZS5zPTEscj1uKGksZSwwLDMpLGUucz1vLHIucyo9byk6cj1uKGksZSwwLEYpLChlPWkubWludXMoci50aW1lcyhlKSkpLmNbMF18fDEhPUZ8fChlLnM9aS5zKSxlKX0sQy5tdWx0aXBsaWVkQnk9Qy50aW1lcz1mdW5jdGlvbihlLHQpe3ZhciBuLHIsbyxpLHMsYSxjLHUsbCxmLGQseSxnLGIsdyxTPXRoaXMsaz1TLmMseD0oZT1uZXcgSihlLHQpKS5jO2lmKCEoayYmeCYma1swXSYmeFswXSkpcmV0dXJuIVMuc3x8IWUuc3x8ayYmIWtbMF0mJiF4fHx4JiYheFswXSYmIWs/ZS5jPWUuZT1lLnM9bnVsbDooZS5zKj1TLnMsayYmeD8oZS5jPVswXSxlLmU9MCk6ZS5jPWUuZT1udWxsKSxlO2ZvcihyPW0oUy5lL3ApK20oZS5lL3ApLGUucyo9Uy5zLChjPWsubGVuZ3RoKTwoZj14Lmxlbmd0aCkmJihnPWssaz14LHg9ZyxvPWMsYz1mLGY9byksbz1jK2YsZz1bXTtvLS07Zy5wdXNoKDApKTtmb3IoYj1oLHc9dixvPWY7LS1vPj0wOyl7Zm9yKG49MCxkPXhbb10ldyx5PXhbb10vd3wwLGk9bysocz1jKTtpPm87KW49KCh1PWQqKHU9a1stLXNdJXcpKyhhPXkqdSsobD1rW3NdL3d8MCkqZCkldyp3K2dbaV0rbikvYnwwKSsoYS93fDApK3kqbCxnW2ktLV09dSViO2dbaV09bn1yZXR1cm4gbj8rK3I6Zy5zcGxpY2UoMCwxKSxLKGUsZyxyKX0sQy5uZWdhdGVkPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IEoodGhpcyk7cmV0dXJuIGUucz0tZS5zfHxudWxsLGV9LEMucGx1cz1mdW5jdGlvbihlLHQpe3ZhciBuLHI9dGhpcyxvPXIucztpZih0PShlPW5ldyBKKGUsdCkpLnMsIW98fCF0KXJldHVybiBuZXcgSihOYU4pO2lmKG8hPXQpcmV0dXJuIGUucz0tdCxyLm1pbnVzKGUpO3ZhciBpPXIuZS9wLHM9ZS5lL3AsYT1yLmMsYz1lLmM7aWYoIWl8fCFzKXtpZighYXx8IWMpcmV0dXJuIG5ldyBKKG8vMCk7aWYoIWFbMF18fCFjWzBdKXJldHVybiBjWzBdP2U6bmV3IEooYVswXT9yOjAqbyl9aWYoaT1tKGkpLHM9bShzKSxhPWEuc2xpY2UoKSxvPWktcyl7Zm9yKG8+MD8ocz1pLG49Yyk6KG89LW8sbj1hKSxuLnJldmVyc2UoKTtvLS07bi5wdXNoKDApKTtuLnJldmVyc2UoKX1mb3IoKG89YS5sZW5ndGgpLSh0PWMubGVuZ3RoKTwwJiYobj1jLGM9YSxhPW4sdD1vKSxvPTA7dDspbz0oYVstLXRdPWFbdF0rY1t0XStvKS9ofDAsYVt0XT1oPT09YVt0XT8wOmFbdF0laDtyZXR1cm4gbyYmKGE9W29dLmNvbmNhdChhKSwrK3MpLEsoZSxhLHMpfSxDLnByZWNpc2lvbj1DLnNkPWZ1bmN0aW9uKGUsdCl7dmFyIG4scixvLGk9dGhpcztpZihudWxsIT1lJiZlIT09ISFlKXJldHVybiBTKGUsMSxnKSxudWxsPT10P3Q9UjpTKHQsMCw4KSxWKG5ldyBKKGkpLGUsdCk7aWYoIShuPWkuYykpcmV0dXJuIG51bGw7aWYocj0obz1uLmxlbmd0aC0xKSpwKzEsbz1uW29dKXtmb3IoO28lMTA9PTA7by89MTAsci0tKTtmb3Iobz1uWzBdO28+PTEwO28vPTEwLHIrKyk7fXJldHVybiBlJiZpLmUrMT5yJiYocj1pLmUrMSkscn0sQy5zaGlmdGVkQnk9ZnVuY3Rpb24oZSl7cmV0dXJuIFMoZSwtOTAwNzE5OTI1NDc0MDk5MSxkKSx0aGlzLnRpbWVzKCIxZSIrZSl9LEMuc3F1YXJlUm9vdD1DLnNxcnQ9ZnVuY3Rpb24oKXt2YXIgZSx0LHIsbyxpLHM9dGhpcyxhPXMuYyxjPXMucyx1PXMuZSxsPVArNCxmPW5ldyBKKCIwLjUiKTtpZigxIT09Y3x8IWF8fCFhWzBdKXJldHVybiBuZXcgSighY3x8YzwwJiYoIWF8fGFbMF0pP05hTjphP3M6MS8wKTtpZigwPT0oYz1NYXRoLnNxcnQoK1kocykpKXx8Yz09MS8wPygoKHQ9YihhKSkubGVuZ3RoK3UpJTI9PTAmJih0Kz0iMCIpLGM9TWF0aC5zcXJ0KCt0KSx1PW0oKHUrMSkvMiktKHU8MHx8dSUyKSxyPW5ldyBKKHQ9Yz09MS8wPyI1ZSIrdToodD1jLnRvRXhwb25lbnRpYWwoKSkuc2xpY2UoMCx0LmluZGV4T2YoImUiKSsxKSt1KSk6cj1uZXcgSihjKyIiKSxyLmNbMF0pZm9yKChjPSh1PXIuZSkrbCk8MyYmKGM9MCk7OylpZihpPXIscj1mLnRpbWVzKGkucGx1cyhuKHMsaSxsLDEpKSksYihpLmMpLnNsaWNlKDAsYyk9PT0odD1iKHIuYykpLnNsaWNlKDAsYykpe2lmKHIuZTx1JiYtLWMsIjk5OTkiIT0odD10LnNsaWNlKGMtMyxjKzEpKSYmKG98fCI0OTk5IiE9dCkpeyt0JiYoK3Quc2xpY2UoMSl8fCI1IiE9dC5jaGFyQXQoMCkpfHwoVihyLHIuZStQKzIsMSksZT0hci50aW1lcyhyKS5lcShzKSk7YnJlYWt9aWYoIW8mJihWKGksaS5lK1ArMiwwKSxpLnRpbWVzKGkpLmVxKHMpKSl7cj1pO2JyZWFrfWwrPTQsYys9NCxvPTF9cmV0dXJuIFYocixyLmUrUCsxLFIsZSl9LEMudG9FeHBvbmVudGlhbD1mdW5jdGlvbihlLHQpe3JldHVybiBudWxsIT1lJiYoUyhlLDAsZyksZSsrKSwkKHRoaXMsZSx0LDEpfSxDLnRvRml4ZWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbnVsbCE9ZSYmKFMoZSwwLGcpLGU9ZSt0aGlzLmUrMSksJCh0aGlzLGUsdCl9LEMudG9Gb3JtYXQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9dGhpcztpZihudWxsPT1uKW51bGwhPWUmJnQmJiJvYmplY3QiPT1vKHQpPyhuPXQsdD1udWxsKTplJiYib2JqZWN0Ij09byhlKT8obj1lLGU9dD1udWxsKTpuPUc7ZWxzZSBpZigib2JqZWN0IiE9byhuKSl0aHJvdyBFcnJvcihsKyJBcmd1bWVudCBub3QgYW4gb2JqZWN0OiAiK24pO2lmKHI9aS50b0ZpeGVkKGUsdCksaS5jKXt2YXIgcyxhPXIuc3BsaXQoIi4iKSxjPStuLmdyb3VwU2l6ZSx1PStuLnNlY29uZGFyeUdyb3VwU2l6ZSxmPW4uZ3JvdXBTZXBhcmF0b3J8fCIiLGg9YVswXSxwPWFbMV0sZD1pLnM8MCx5PWQ/aC5zbGljZSgxKTpoLHY9eS5sZW5ndGg7aWYodSYmKHM9YyxjPXUsdT1zLHYtPXMpLGM+MCYmdj4wKXtmb3Iocz12JWN8fGMsaD15LnN1YnN0cigwLHMpO3M8djtzKz1jKWgrPWYreS5zdWJzdHIocyxjKTt1PjAmJihoKz1mK3kuc2xpY2UocykpLGQmJihoPSItIitoKX1yPXA/aCsobi5kZWNpbWFsU2VwYXJhdG9yfHwiIikrKCh1PStuLmZyYWN0aW9uR3JvdXBTaXplKT9wLnJlcGxhY2UobmV3IFJlZ0V4cCgiXFxkeyIrdSsifVxcQiIsImciKSwiJCYiKyhuLmZyYWN0aW9uR3JvdXBTZXBhcmF0b3J8fCIiKSk6cCk6aH1yZXR1cm4obi5wcmVmaXh8fCIiKStyKyhuLnN1ZmZpeHx8IiIpfSxDLnRvRnJhY3Rpb249ZnVuY3Rpb24oZSl7dmFyIHQscixvLGkscyxhLGMsdSxmLGgsZCx2LGc9dGhpcyxtPWcuYztpZihudWxsIT1lJiYoIShjPW5ldyBKKGUpKS5pc0ludGVnZXIoKSYmKGMuY3x8MSE9PWMucyl8fGMubHQoTCkpKXRocm93IEVycm9yKGwrIkFyZ3VtZW50ICIrKGMuaXNJbnRlZ2VyKCk/Im91dCBvZiByYW5nZTogIjoibm90IGFuIGludGVnZXI6ICIpK1koYykpO2lmKCFtKXJldHVybiBuZXcgSihnKTtmb3IodD1uZXcgSihMKSxmPXI9bmV3IEooTCksbz11PW5ldyBKKEwpLHY9YihtKSxzPXQuZT12Lmxlbmd0aC1nLmUtMSx0LmNbMF09eVsoYT1zJXApPDA/cCthOmFdLGU9IWV8fGMuY29tcGFyZWRUbyh0KT4wP3M+MD90OmY6YyxhPU0sTT0xLzAsYz1uZXcgSih2KSx1LmNbMF09MDtoPW4oYyx0LDAsMSksMSE9KGk9ci5wbHVzKGgudGltZXMobykpKS5jb21wYXJlZFRvKGUpOylyPW8sbz1pLGY9dS5wbHVzKGgudGltZXMoaT1mKSksdT1pLHQ9Yy5taW51cyhoLnRpbWVzKGk9dCkpLGM9aTtyZXR1cm4gaT1uKGUubWludXMociksbywwLDEpLHU9dS5wbHVzKGkudGltZXMoZikpLHI9ci5wbHVzKGkudGltZXMobykpLHUucz1mLnM9Zy5zLGQ9bihmLG8scyo9MixSKS5taW51cyhnKS5hYnMoKS5jb21wYXJlZFRvKG4odSxyLHMsUikubWludXMoZykuYWJzKCkpPDE/W2Ysb106W3Uscl0sTT1hLGR9LEMudG9OdW1iZXI9ZnVuY3Rpb24oKXtyZXR1cm4rWSh0aGlzKX0sQy50b1ByZWNpc2lvbj1mdW5jdGlvbihlLHQpe3JldHVybiBudWxsIT1lJiZTKGUsMSxnKSwkKHRoaXMsZSx0LDIpfSxDLnRvU3RyaW5nPWZ1bmN0aW9uKGUpe3ZhciB0LG49dGhpcyxvPW4ucyxpPW4uZTtyZXR1cm4gbnVsbD09PWk/bz8odD0iSW5maW5pdHkiLG88MCYmKHQ9Ii0iK3QpKTp0PSJOYU4iOihudWxsPT1lP3Q9aTw9cXx8aT49ST94KGIobi5jKSxpKTpFKGIobi5jKSxpLCIwIik6MTA9PT1lJiZ6P3Q9RShiKChuPVYobmV3IEoobiksUCtpKzEsUikpLmMpLG4uZSwiMCIpOihTKGUsMixILmxlbmd0aCwiQmFzZSIpLHQ9cihFKGIobi5jKSxpLCIwIiksMTAsZSxvLCEwKSksbzwwJiZuLmNbMF0mJih0PSItIit0KSksdH0sQy52YWx1ZU9mPUMudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIFkodGhpcyl9LEMuX2lzQmlnTnVtYmVyPSEwLG51bGwhPXQmJkouc2V0KHQpLEp9KCkscy5kZWZhdWx0PXMuQmlnTnVtYmVyPXMsdm9pZCAwPT09KHI9ZnVuY3Rpb24oKXtyZXR1cm4gc30uY2FsbCh0LG4sdCxlKSl8fChlLmV4cG9ydHM9cil9KCl9LDg2NzooZSx0LG4pPT57dmFyIHI9big2OTIpLnN0cmluZ2lmeSxvPW4oMjU4KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJue3BhcnNlOm8oZSksc3RyaW5naWZ5OnJ9fSxlLmV4cG9ydHMucGFyc2U9bygpLGUuZXhwb3J0cy5zdHJpbmdpZnk9cn0sMjU4OihlLHQsbik9PntmdW5jdGlvbiByKGUpe3JldHVybiByPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSxyKGUpfXZhciBvPW51bGwsaT0vKD86X3xcXHUwMDVbRmZdKSg/Ol98XFx1MDA1W0ZmXSkoPzpwfFxcdTAwNzApKD86cnxcXHUwMDcyKSg/Om98XFx1MDA2W0ZmXSkoPzp0fFxcdTAwNzQpKD86b3xcXHUwMDZbRmZdKSg/Ol98XFx1MDA1W0ZmXSkoPzpffFxcdTAwNVtGZl0pLyxzPS8oPzpjfFxcdTAwNjMpKD86b3xcXHUwMDZbRmZdKSg/Om58XFx1MDA2W0VlXSkoPzpzfFxcdTAwNzMpKD86dHxcXHUwMDc0KSg/OnJ8XFx1MDA3MikoPzp1fFxcdTAwNzUpKD86Y3xcXHUwMDYzKSg/OnR8XFx1MDA3NCkoPzpvfFxcdTAwNltGZl0pKD86cnxcXHUwMDcyKS87ZS5leHBvcnRzPWZ1bmN0aW9uKGUpeyJ1c2Ugc3RyaWN0Ijt2YXIgdD17c3RyaWN0OiExLHN0b3JlQXNTdHJpbmc6ITEsYWx3YXlzUGFyc2VBc0JpZzohMSx1c2VOYXRpdmVCaWdJbnQ6ITEscHJvdG9BY3Rpb246ImVycm9yIixjb25zdHJ1Y3RvckFjdGlvbjoiZXJyb3IifTtpZihudWxsIT1lKXtpZighMD09PWUuc3RyaWN0JiYodC5zdHJpY3Q9ITApLCEwPT09ZS5zdG9yZUFzU3RyaW5nJiYodC5zdG9yZUFzU3RyaW5nPSEwKSx0LmFsd2F5c1BhcnNlQXNCaWc9ITA9PT1lLmFsd2F5c1BhcnNlQXNCaWcmJmUuYWx3YXlzUGFyc2VBc0JpZyx0LnVzZU5hdGl2ZUJpZ0ludD0hMD09PWUudXNlTmF0aXZlQmlnSW50JiZlLnVzZU5hdGl2ZUJpZ0ludCx2b2lkIDAhPT1lLmNvbnN0cnVjdG9yQWN0aW9uKXtpZigiZXJyb3IiIT09ZS5jb25zdHJ1Y3RvckFjdGlvbiYmImlnbm9yZSIhPT1lLmNvbnN0cnVjdG9yQWN0aW9uJiYicHJlc2VydmUiIT09ZS5jb25zdHJ1Y3RvckFjdGlvbil0aHJvdyBuZXcgRXJyb3IoJ0luY29ycmVjdCB2YWx1ZSBmb3IgY29uc3RydWN0b3JBY3Rpb24gb3B0aW9uLCBtdXN0IGJlICJlcnJvciIsICJpZ25vcmUiIG9yIHVuZGVmaW5lZCBidXQgcGFzc2VkICcuY29uY2F0KGUuY29uc3RydWN0b3JBY3Rpb24pKTt0LmNvbnN0cnVjdG9yQWN0aW9uPWUuY29uc3RydWN0b3JBY3Rpb259aWYodm9pZCAwIT09ZS5wcm90b0FjdGlvbil7aWYoImVycm9yIiE9PWUucHJvdG9BY3Rpb24mJiJpZ25vcmUiIT09ZS5wcm90b0FjdGlvbiYmInByZXNlcnZlIiE9PWUucHJvdG9BY3Rpb24pdGhyb3cgbmV3IEVycm9yKCdJbmNvcnJlY3QgdmFsdWUgZm9yIHByb3RvQWN0aW9uIG9wdGlvbiwgbXVzdCBiZSAiZXJyb3IiLCAiaWdub3JlIiBvciB1bmRlZmluZWQgYnV0IHBhc3NlZCAnLmNvbmNhdChlLnByb3RvQWN0aW9uKSk7dC5wcm90b0FjdGlvbj1lLnByb3RvQWN0aW9ufX12YXIgYSxjLHUsbCxmPXsnIic6JyInLCJcXCI6IlxcIiwiLyI6Ii8iLGI6IlxiIixmOiJcZiIsbjoiXG4iLHI6IlxyIix0OiJcdCJ9LGg9ZnVuY3Rpb24oZSl7dGhyb3d7bmFtZToiU3ludGF4RXJyb3IiLG1lc3NhZ2U6ZSxhdDphLHRleHQ6dX19LHA9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUhPT1jJiZoKCJFeHBlY3RlZCAnIitlKyInIGluc3RlYWQgb2YgJyIrYysiJyIpLGM9dS5jaGFyQXQoYSksYSs9MSxjfSxkPWZ1bmN0aW9uKCl7dmFyIGUscj0iIjtmb3IoIi0iPT09YyYmKHI9Ii0iLHAoIi0iKSk7Yz49IjAiJiZjPD0iOSI7KXIrPWMscCgpO2lmKCIuIj09PWMpZm9yKHIrPSIuIjtwKCkmJmM+PSIwIiYmYzw9IjkiOylyKz1jO2lmKCJlIj09PWN8fCJFIj09PWMpZm9yKHIrPWMscCgpLCItIiE9PWMmJiIrIiE9PWN8fChyKz1jLHAoKSk7Yz49IjAiJiZjPD0iOSI7KXIrPWMscCgpO2lmKGU9K3IsaXNGaW5pdGUoZSkpcmV0dXJuIG51bGw9PW8mJihvPW4oNTE4KSksci5sZW5ndGg+MTU/dC5zdG9yZUFzU3RyaW5nP3I6dC51c2VOYXRpdmVCaWdJbnQ/QmlnSW50KHIpOm5ldyBvKHIpOnQuYWx3YXlzUGFyc2VBc0JpZz90LnVzZU5hdGl2ZUJpZ0ludD9CaWdJbnQoZSk6bmV3IG8oZSk6ZTtoKCJCYWQgbnVtYmVyIil9LHk9ZnVuY3Rpb24oKXt2YXIgZSx0LG4scj0iIjtpZignIic9PT1jKWZvcih2YXIgbz1hO3AoKTspe2lmKCciJz09PWMpcmV0dXJuIGEtMT5vJiYocis9dS5zdWJzdHJpbmcobyxhLTEpKSxwKCkscjtpZigiXFwiPT09Yyl7aWYoYS0xPm8mJihyKz11LnN1YnN0cmluZyhvLGEtMSkpLHAoKSwidSI9PT1jKXtmb3Iobj0wLHQ9MDt0PDQmJihlPXBhcnNlSW50KHAoKSwxNiksaXNGaW5pdGUoZSkpO3QrPTEpbj0xNipuK2U7cis9U3RyaW5nLmZyb21DaGFyQ29kZShuKX1lbHNle2lmKCJzdHJpbmciIT10eXBlb2YgZltjXSlicmVhaztyKz1mW2NdfW89YX19aCgiQmFkIHN0cmluZyIpfSx2PWZ1bmN0aW9uKCl7Zm9yKDtjJiZjPD0iICI7KXAoKX07cmV0dXJuIGw9ZnVuY3Rpb24oKXtzd2l0Y2godigpLGMpe2Nhc2UieyI6cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGUsbj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKCJ7Ij09PWMpe2lmKHAoInsiKSx2KCksIn0iPT09YylyZXR1cm4gcCgifSIpLG47Zm9yKDtjOyl7aWYoZT15KCksdigpLHAoIjoiKSwhMD09PXQuc3RyaWN0JiZPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChuLGUpJiZoKCdEdXBsaWNhdGUga2V5ICInK2UrJyInKSwhMD09PWkudGVzdChlKT8iZXJyb3IiPT09dC5wcm90b0FjdGlvbj9oKCJPYmplY3QgY29udGFpbnMgZm9yYmlkZGVuIHByb3RvdHlwZSBwcm9wZXJ0eSIpOiJpZ25vcmUiPT09dC5wcm90b0FjdGlvbj9sKCk6bltlXT1sKCk6ITA9PT1zLnRlc3QoZSk/ImVycm9yIj09PXQuY29uc3RydWN0b3JBY3Rpb24/aCgiT2JqZWN0IGNvbnRhaW5zIGZvcmJpZGRlbiBjb25zdHJ1Y3RvciBwcm9wZXJ0eSIpOiJpZ25vcmUiPT09dC5jb25zdHJ1Y3RvckFjdGlvbj9sKCk6bltlXT1sKCk6bltlXT1sKCksdigpLCJ9Ij09PWMpcmV0dXJuIHAoIn0iKSxuO3AoIiwiKSx2KCl9fWgoIkJhZCBvYmplY3QiKX0oKTtjYXNlIlsiOnJldHVybiBmdW5jdGlvbigpe3ZhciBlPVtdO2lmKCJbIj09PWMpe2lmKHAoIlsiKSx2KCksIl0iPT09YylyZXR1cm4gcCgiXSIpLGU7Zm9yKDtjOyl7aWYoZS5wdXNoKGwoKSksdigpLCJdIj09PWMpcmV0dXJuIHAoIl0iKSxlO3AoIiwiKSx2KCl9fWgoIkJhZCBhcnJheSIpfSgpO2Nhc2UnIic6cmV0dXJuIHkoKTtjYXNlIi0iOnJldHVybiBkKCk7ZGVmYXVsdDpyZXR1cm4gYz49IjAiJiZjPD0iOSI/ZCgpOmZ1bmN0aW9uKCl7c3dpdGNoKGMpe2Nhc2UidCI6cmV0dXJuIHAoInQiKSxwKCJyIikscCgidSIpLHAoImUiKSwhMDtjYXNlImYiOnJldHVybiBwKCJmIikscCgiYSIpLHAoImwiKSxwKCJzIikscCgiZSIpLCExO2Nhc2UibiI6cmV0dXJuIHAoIm4iKSxwKCJ1IikscCgibCIpLHAoImwiKSxudWxsfWgoIlVuZXhwZWN0ZWQgJyIrYysiJyIpfSgpfX0sZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4gdT1lKyIiLGE9MCxjPSIgIixuPWwoKSx2KCksYyYmaCgiU3ludGF4IGVycm9yIiksImZ1bmN0aW9uIj09dHlwZW9mIHQ/ZnVuY3Rpb24gZShuLG8pe3ZhciBpLHM9bltvXTtyZXR1cm4gcyYmIm9iamVjdCI9PT1yKHMpJiZPYmplY3Qua2V5cyhzKS5mb3JFYWNoKChmdW5jdGlvbih0KXt2b2lkIDAhPT0oaT1lKHMsdCkpP3NbdF09aTpkZWxldGUgc1t0XX0pKSx0LmNhbGwobixvLHMpfSh7IiI6bn0sIiIpOm59fX0sNjkyOihlLHQsbik9PntmdW5jdGlvbiByKGUpe3JldHVybiByPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSxyKGUpfXZhciBvPW4oNTE4KSxpPWUuZXhwb3J0czshZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7dmFyIGUsdCxuLHM9L1tcXFwiXHgwMC1ceDFmXHg3Zi1ceDlmXHUwMGFkXHUwNjAwLVx1MDYwNFx1MDcwZlx1MTdiNFx1MTdiNVx1MjAwYy1cdTIwMGZcdTIwMjgtXHUyMDJmXHUyMDYwLVx1MjA2Zlx1ZmVmZlx1ZmZmMC1cdWZmZmZdL2csYT17IlxiIjoiXFxiIiwiXHQiOiJcXHQiLCJcbiI6IlxcbiIsIlxmIjoiXFxmIiwiXHIiOiJcXHIiLCciJzonXFwiJywiXFwiOiJcXFxcIn07ZnVuY3Rpb24gYyhlKXtyZXR1cm4gcy5sYXN0SW5kZXg9MCxzLnRlc3QoZSk/JyInK2UucmVwbGFjZShzLChmdW5jdGlvbihlKXt2YXIgdD1hW2VdO3JldHVybiJzdHJpbmciPT10eXBlb2YgdD90OiJcXHUiKygiMDAwMCIrZS5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpfSkpKyciJzonIicrZSsnIid9ZnVuY3Rpb24gdShpLHMpe3ZhciBhLGwsZixoLHAsZD1lLHk9c1tpXSx2PW51bGwhPXkmJih5IGluc3RhbmNlb2Ygb3x8by5pc0JpZ051bWJlcih5KSk7c3dpdGNoKHkmJiJvYmplY3QiPT09cih5KSYmImZ1bmN0aW9uIj09dHlwZW9mIHkudG9KU09OJiYoeT15LnRvSlNPTihpKSksImZ1bmN0aW9uIj09dHlwZW9mIG4mJih5PW4uY2FsbChzLGkseSkpLHIoeSkpe2Nhc2Uic3RyaW5nIjpyZXR1cm4gdj95OmMoeSk7Y2FzZSJudW1iZXIiOnJldHVybiBpc0Zpbml0ZSh5KT9TdHJpbmcoeSk6Im51bGwiO2Nhc2UiYm9vbGVhbiI6Y2FzZSJudWxsIjpjYXNlImJpZ2ludCI6cmV0dXJuIFN0cmluZyh5KTtjYXNlIm9iamVjdCI6aWYoIXkpcmV0dXJuIm51bGwiO2lmKGUrPXQscD1bXSwiW29iamVjdCBBcnJheV0iPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh5KSl7Zm9yKGg9eS5sZW5ndGgsYT0wO2E8aDthKz0xKXBbYV09dShhLHkpfHwibnVsbCI7cmV0dXJuIGY9MD09PXAubGVuZ3RoPyJbXSI6ZT8iW1xuIitlK3Auam9pbigiLFxuIitlKSsiXG4iK2QrIl0iOiJbIitwLmpvaW4oIiwiKSsiXSIsZT1kLGZ9aWYobiYmIm9iamVjdCI9PT1yKG4pKWZvcihoPW4ubGVuZ3RoLGE9MDthPGg7YSs9MSkic3RyaW5nIj09dHlwZW9mIG5bYV0mJihmPXUobD1uW2FdLHkpKSYmcC5wdXNoKGMobCkrKGU/IjogIjoiOiIpK2YpO2Vsc2UgT2JqZWN0LmtleXMoeSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIG49dSh0LHkpO24mJnAucHVzaChjKHQpKyhlPyI6ICI6IjoiKStuKX0pKTtyZXR1cm4gZj0wPT09cC5sZW5ndGg/Int9IjplPyJ7XG4iK2UrcC5qb2luKCIsXG4iK2UpKyJcbiIrZCsifSI6InsiK3Auam9pbigiLCIpKyJ9IixlPWQsZn19ImZ1bmN0aW9uIiE9dHlwZW9mIGkuc3RyaW5naWZ5JiYoaS5zdHJpbmdpZnk9ZnVuY3Rpb24obyxpLHMpe3ZhciBhO2lmKGU9IiIsdD0iIiwibnVtYmVyIj09dHlwZW9mIHMpZm9yKGE9MDthPHM7YSs9MSl0Kz0iICI7ZWxzZSJzdHJpbmciPT10eXBlb2YgcyYmKHQ9cyk7aWYobj1pLGkmJiJmdW5jdGlvbiIhPXR5cGVvZiBpJiYoIm9iamVjdCIhPT1yKGkpfHwibnVtYmVyIiE9dHlwZW9mIGkubGVuZ3RoKSl0aHJvdyBuZXcgRXJyb3IoIkpTT04uc3RyaW5naWZ5Iik7cmV0dXJuIHUoIiIseyIiOm99KX0pfSgpfSwyOTg6ZT0+e2Z1bmN0aW9uIHQoZSl7cmV0dXJuIHQ9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9LHQoZSl9dmFyIG49ZnVuY3Rpb24oKXt2YXIgZSxuPXtnZXRDbGFzczpmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSxnZXRUeXBlOmZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lKXJldHVybiJudWxsIjtzd2l0Y2godChlKSl7Y2FzZSJudW1iZXIiOnJldHVybiJudW1iZXIiO2Nhc2Uic3RyaW5nIjpyZXR1cm4ic3RyaW5nIjtjYXNlImJvb2xlYW4iOnJldHVybiJib29sZWFuIn1zd2l0Y2gobi5nZXRDbGFzcyhlKSl7Y2FzZSJbb2JqZWN0IEFycmF5XSI6cmV0dXJuImFycmF5IjtjYXNlIltvYmplY3QgT2JqZWN0XSI6cmV0dXJuIm9iamVjdCJ9dGhyb3cgbmV3IEVycm9yKCJCYWQgdHlwZTogIituLmdldENsYXNzKGUpKX0sZm9yRWFjaE5vZGU6ZnVuY3Rpb24oZSx0KXt2YXIgcjtzd2l0Y2gobi5nZXRUeXBlKGUpKXtjYXNlImFycmF5IjpyPWUubGVuZ3RoLTEsZS5mb3JFYWNoKChmdW5jdGlvbihlLG4pe3QobixlLG49PT1yKX0pKTticmVhaztjYXNlIm9iamVjdCI6dmFyIG89T2JqZWN0LmtleXMoZSkuc29ydCgpO3I9by5sZW5ndGgtMSxvLmZvckVhY2goKGZ1bmN0aW9uKG4sbyl7dChuLGVbbl0sbz09PXIpfSkpfX0saW5oZXJpdHM6KGU9ZnVuY3Rpb24oKXt9LGZ1bmN0aW9uKHQsbil7ZS5wcm90b3R5cGU9bi5wcm90b3R5cGUsdC5wcm90b3R5cGU9bmV3IGUsdC5wcm90b3R5cGUuY29uc3RydWN0b3I9dH0pLGlzVmFsaWRSb290OmZ1bmN0aW9uKGUpe3N3aXRjaChuLmdldFR5cGUoZSkpe2Nhc2Uib2JqZWN0IjpjYXNlImFycmF5IjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX0sZXh0ZW5kOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShuKSYmKGVbbl09dFtuXSl9fTtmdW5jdGlvbiByKGUsdCxvKXt2YXIgaT1uLmdldFR5cGUodCk7aWYoaSBpbiByLkNPTlNUUlVDVE9SUylyZXR1cm4gbmV3IHIuQ09OU1RSVUNUT1JTW2ldKGUsdCxvKTt0aHJvdyBuZXcgRXJyb3IoIkJhZCB0eXBlOiAiK24uZ2V0Q2xhc3ModCkpfWZ1bmN0aW9uIG8oZSx0LG4pe2lmKHRoaXMuY29uc3RydWN0b3I9PT1vKXRocm93IG5ldyBFcnJvcigiVGhpcyBpcyBhYnN0cmFjdCBjbGFzcyIpO3ZhciByPXRoaXMsaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsaSIpO3IubGFiZWw9ZSxyLmlzQ29tcGxleD0hMSxpLmNsYXNzTGlzdC5hZGQoImpzb250cmVlX25vZGUiKSxpLmlubmVySFRNTD1mdW5jdGlvbihlLHQpe3JldHVybicgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqc29udHJlZV9sYWJlbC13cmFwcGVyIj4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ianNvbnRyZWVfbGFiZWwiPiInK2UrJyI8L3NwYW4+IDogICAgICAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ianNvbnRyZWVfdmFsdWUtd3JhcHBlciI+ICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Impzb250cmVlX3ZhbHVlIGpzb250cmVlX3ZhbHVlXycrci50eXBlKyciPicrdCsiPC9zcGFuPiIrKG4/IiI6IiwiKSsiPC9zcGFuPiJ9KGUsdCksci5lbD1pLGkucXVlcnlTZWxlY3RvcigiLmpzb250cmVlX2xhYmVsIikuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLChmdW5jdGlvbihlKXtpZighZS5hbHRLZXkpcmV0dXJuIGUuc2hpZnRLZXk/KGRvY3VtZW50LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpLHZvaWQgYWxlcnQoci5nZXRKU09OUGF0aCgpKSk6dm9pZCAwO3IudG9nZ2xlTWFya2VkKCl9KSwhMSl9ZnVuY3Rpb24gaShlLHQsbil7dGhpcy50eXBlPSJib29sZWFuIixvLmNhbGwodGhpcyxlLHQsbil9ZnVuY3Rpb24gcyhlLHQsbil7dGhpcy50eXBlPSJudW1iZXIiLG8uY2FsbCh0aGlzLGUsdCxuKX1mdW5jdGlvbiBhKGUsdCxuKXt0aGlzLnR5cGU9InN0cmluZyIsby5jYWxsKHRoaXMsZSwnIicrdCsnIicsbil9ZnVuY3Rpb24gYyhlLHQsbil7dGhpcy50eXBlPSJudWxsIixvLmNhbGwodGhpcyxlLHQsbil9ZnVuY3Rpb24gdShlLHQsbyl7aWYodGhpcy5jb25zdHJ1Y3Rvcj09PXUpdGhyb3cgbmV3IEVycm9yKCJUaGlzIGlzIGFic3RyYWN0IGNsYXNzIik7dmFyIGkscyxhLGM9dGhpcyxsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxpIiksZj1bXTtjLmxhYmVsPWUsYy5pc0NvbXBsZXg9ITAsbC5jbGFzc0xpc3QuYWRkKCJqc29udHJlZV9ub2RlIiksbC5jbGFzc0xpc3QuYWRkKCJqc29udHJlZV9ub2RlX2NvbXBsZXgiKSxsLmlubmVySFRNTD1mdW5jdGlvbihlLHQpe3ZhciBuPW8/IiI6IiwiLHI9JyAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Impzb250cmVlX3ZhbHVlLXdyYXBwZXIiPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJqc29udHJlZV92YWx1ZSBqc29udHJlZV92YWx1ZV8nK2MudHlwZSsnIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPicrdFswXSsnPC9iPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Impzb250cmVlX3Nob3ctbW9yZSI+JmhlbGxpcDs8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Impzb250cmVlX2NoaWxkLW5vZGVzIj48L3VsPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+Jyt0WzFdKyI8L2I+PC9kaXY+IituKyI8L2Rpdj4iO3JldHVybiBudWxsIT09ZSYmKHI9JyAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJqc29udHJlZV9sYWJlbC13cmFwcGVyIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Impzb250cmVlX2xhYmVsIj48c3BhbiBjbGFzcz0ianNvbnRyZWVfZXhwYW5kLWJ1dHRvbiI+PC9zcGFuPiInK2UrJyI8L3NwYW4+IDogICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPicrcikscn0oZSxjLnN5bSksaT1sLnF1ZXJ5U2VsZWN0b3IoIi5qc29udHJlZV9jaGlsZC1ub2RlcyIpLG51bGwhPT1lPyhzPWwucXVlcnlTZWxlY3RvcigiLmpzb250cmVlX2xhYmVsIiksYT1sLnF1ZXJ5U2VsZWN0b3IoIi5qc29udHJlZV9zaG93LW1vcmUiKSxzLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwoZnVuY3Rpb24oZSl7aWYoIWUuYWx0S2V5KXJldHVybiBlLnNoaWZ0S2V5Pyhkb2N1bWVudC5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKSx2b2lkIGFsZXJ0KGMuZ2V0SlNPTlBhdGgoKSkpOnZvaWQgYy50b2dnbGUoZS5jdHJsS2V5fHxlLm1ldGFLZXkpO2MudG9nZ2xlTWFya2VkKCl9KSwhMSksYS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsKGZ1bmN0aW9uKGUpe2MudG9nZ2xlKGUuY3RybEtleXx8ZS5tZXRhS2V5KX0pLCExKSxjLmlzUm9vdD0hMSk6KGMuaXNSb290PSEwLGMucGFyZW50PW51bGwsbC5jbGFzc0xpc3QuYWRkKCJqc29udHJlZV9ub2RlX2V4cGFuZGVkIikpLGMuZWw9bCxjLmNoaWxkTm9kZXM9ZixjLmNoaWxkTm9kZXNVbD1pLG4uZm9yRWFjaE5vZGUodCwoZnVuY3Rpb24oZSx0LG4pe2MuYWRkQ2hpbGQobmV3IHIoZSx0LG4pKX0pKSxjLmlzRW1wdHk9IUJvb2xlYW4oZi5sZW5ndGgpLGMuaXNFbXB0eSYmbC5jbGFzc0xpc3QuYWRkKCJqc29udHJlZV9ub2RlX2VtcHR5Iil9ZnVuY3Rpb24gbChlLHQsbil7dGhpcy5zeW09WyJ7IiwifSJdLHRoaXMudHlwZT0ib2JqZWN0Iix1LmNhbGwodGhpcyxlLHQsbil9ZnVuY3Rpb24gZihlLHQsbil7dGhpcy5zeW09WyJbIiwiXSJdLHRoaXMudHlwZT0iYXJyYXkiLHUuY2FsbCh0aGlzLGUsdCxuKX1mdW5jdGlvbiBoKGUsdCl7dGhpcy53cmFwcGVyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInVsIiksdGhpcy53cmFwcGVyLmNsYXNzTmFtZT0ianNvbnRyZWVfdHJlZSBjbGVhcmZpeCIsdGhpcy5yb290Tm9kZT1udWxsLHRoaXMuc291cmNlSlNPTk9iaj1lLHRoaXMubG9hZERhdGEoZSksdGhpcy5hcHBlbmRUbyh0KX1yZXR1cm4gci5DT05TVFJVQ1RPUlM9e2Jvb2xlYW46aSxudW1iZXI6cyxzdHJpbmc6YSxudWxsOmMsb2JqZWN0OmwsYXJyYXk6Zn0sby5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOm8sbWFyazpmdW5jdGlvbigpe3RoaXMuZWwuY2xhc3NMaXN0LmFkZCgianNvbnRyZWVfbm9kZV9tYXJrZWQiKX0sdW5tYXJrOmZ1bmN0aW9uKCl7dGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKCJqc29udHJlZV9ub2RlX21hcmtlZCIpfSx0b2dnbGVNYXJrZWQ6ZnVuY3Rpb24oKXt0aGlzLmVsLmNsYXNzTGlzdC50b2dnbGUoImpzb250cmVlX25vZGVfbWFya2VkIil9LGV4cGFuZFBhcmVudDpmdW5jdGlvbihlKXt0aGlzLnBhcmVudCYmKHRoaXMucGFyZW50LmV4cGFuZCgpLHRoaXMucGFyZW50LmV4cGFuZFBhcmVudChlKSl9LGdldEpTT05QYXRoOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmlzUm9vdD8iJCI6KHQ9ImFycmF5Ij09PXRoaXMucGFyZW50LnR5cGU/IlsiK3RoaXMubGFiZWwrIl0iOmU/Ii4iK3RoaXMubGFiZWw6IlsnIit0aGlzLmxhYmVsKyInXSIsdGhpcy5wYXJlbnQuZ2V0SlNPTlBhdGgoZSkrdCk7dmFyIHR9fSxuLmluaGVyaXRzKGksbyksbi5pbmhlcml0cyhzLG8pLG4uaW5oZXJpdHMoYSxvKSxuLmluaGVyaXRzKGMsbyksbi5pbmhlcml0cyh1LG8pLG4uZXh0ZW5kKHUucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp1LGFkZENoaWxkOmZ1bmN0aW9uKGUpe3RoaXMuY2hpbGROb2Rlcy5wdXNoKGUpLHRoaXMuY2hpbGROb2Rlc1VsLmFwcGVuZENoaWxkKGUuZWwpLGUucGFyZW50PXRoaXN9LGV4cGFuZDpmdW5jdGlvbihlKXt0aGlzLmlzRW1wdHl8fCh0aGlzLmlzUm9vdHx8dGhpcy5lbC5jbGFzc0xpc3QuYWRkKCJqc29udHJlZV9ub2RlX2V4cGFuZGVkIiksZSYmdGhpcy5jaGlsZE5vZGVzLmZvckVhY2goKGZ1bmN0aW9uKHQsbil7dC5pc0NvbXBsZXgmJnQuZXhwYW5kKGUpfSkpKX0sY29sbGFwc2U6ZnVuY3Rpb24oZSl7dGhpcy5pc0VtcHR5fHwodGhpcy5pc1Jvb3R8fHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSgianNvbnRyZWVfbm9kZV9leHBhbmRlZCIpLGUmJnRoaXMuY2hpbGROb2Rlcy5mb3JFYWNoKChmdW5jdGlvbih0LG4pe3QuaXNDb21wbGV4JiZ0LmNvbGxhcHNlKGUpfSkpKX0sdG9nZ2xlOmZ1bmN0aW9uKGUpe2lmKCF0aGlzLmlzRW1wdHkmJih0aGlzLmVsLmNsYXNzTGlzdC50b2dnbGUoImpzb250cmVlX25vZGVfZXhwYW5kZWQiKSxlKSl7dmFyIHQ9dGhpcy5lbC5jbGFzc0xpc3QuY29udGFpbnMoImpzb250cmVlX25vZGVfZXhwYW5kZWQiKTt0aGlzLmNoaWxkTm9kZXMuZm9yRWFjaCgoZnVuY3Rpb24obixyKXtuLmlzQ29tcGxleCYmblt0PyJleHBhbmQiOiJjb2xsYXBzZSJdKGUpfSkpfX0sZmluZENoaWxkcmVuOmZ1bmN0aW9uKGUsdCxuKXt0aGlzLmlzRW1wdHl8fHRoaXMuY2hpbGROb2Rlcy5mb3JFYWNoKChmdW5jdGlvbihyLG8pe2UocikmJnQociksci5pc0NvbXBsZXgmJm4mJnIuZmluZENoaWxkcmVuKGUsdCxuKX0pKX19KSxuLmluaGVyaXRzKGwsdSksbi5pbmhlcml0cyhmLHUpLGgucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpoLGxvYWREYXRhOmZ1bmN0aW9uKGUpe24uaXNWYWxpZFJvb3QoZSk/KHRoaXMuc291cmNlSlNPTk9iaj1lLHRoaXMucm9vdE5vZGU9bmV3IHIobnVsbCxlLCJsYXN0IiksdGhpcy53cmFwcGVyLmlubmVySFRNTD0iIix0aGlzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5yb290Tm9kZS5lbCkpOmFsZXJ0KCJUaGUgcm9vdCBzaG91bGQgYmUgYW4gb2JqZWN0IG9yIGFuIGFycmF5Iil9LGFwcGVuZFRvOmZ1bmN0aW9uKGUpe2UuYXBwZW5kQ2hpbGQodGhpcy53cmFwcGVyKX0sZXhwYW5kOmZ1bmN0aW9uKGUpe3RoaXMucm9vdE5vZGUuaXNDb21wbGV4JiYoImZ1bmN0aW9uIj09dHlwZW9mIGU/dGhpcy5yb290Tm9kZS5jaGlsZE5vZGVzLmZvckVhY2goKGZ1bmN0aW9uKHQsbil7dC5pc0NvbXBsZXgmJmUodCkmJnQuZXhwYW5kKCl9KSk6dGhpcy5yb290Tm9kZS5leHBhbmQoInJlY3Vyc2l2ZSIpKX0sY29sbGFwc2U6ZnVuY3Rpb24oKXsiZnVuY3Rpb24iPT10eXBlb2YgdGhpcy5yb290Tm9kZS5jb2xsYXBzZSYmdGhpcy5yb290Tm9kZS5jb2xsYXBzZSgicmVjdXJzaXZlIil9LHRvU291cmNlSlNPTjpmdW5jdGlvbihlKXtpZighZSlyZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5zb3VyY2VKU09OT2JqKTt2YXIgdD0iWyVeJCMkJV4lXSIsbj1KU09OLnN0cmluZ2lmeSh0aGlzLnNvdXJjZUpTT05PYmosbnVsbCx0KTtyZXR1cm4obj1uLnNwbGl0KCJcbiIpLmpvaW4oIjxiciAvPiIpKS5zcGxpdCh0KS5qb2luKCImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDsiKX0sZmluZEFuZEhhbmRsZTpmdW5jdGlvbihlLHQpe3RoaXMucm9vdE5vZGUuZmluZENoaWxkcmVuKGUsdCwiaXNSZWN1cnNpdmUiKX0sdW5tYXJrQWxsOmZ1bmN0aW9uKCl7dGhpcy5yb290Tm9kZS5maW5kQ2hpbGRyZW4oKGZ1bmN0aW9uKGUpe3JldHVybiEwfSksKGZ1bmN0aW9uKGUpe2UudW5tYXJrKCl9KSwiaXNSZWN1cnNpdmUiKX19LHtjcmVhdGU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IGgoZSx0KX19fSgpO2UuZXhwb3J0cz1ufSwzMDA6KGUsdCxuKT0+eyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKDgwOCk7ZnVuY3Rpb24gbyhlKXtyZXR1cm4gbz0iZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYic3ltYm9sIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiYiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgZX0sbyhlKX1mdW5jdGlvbiBpKGUpe2lmKCJzdHJpbmciIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJQYXRoIG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkICIrSlNPTi5zdHJpbmdpZnkoZSkpfWZ1bmN0aW9uIHMoZSx0KXtmb3IodmFyIG4scj0iIixvPTAsaT0tMSxzPTAsYT0wO2E8PWUubGVuZ3RoOysrYSl7aWYoYTxlLmxlbmd0aCluPWUuY2hhckNvZGVBdChhKTtlbHNle2lmKDQ3PT09bilicmVhaztuPTQ3fWlmKDQ3PT09bil7aWYoaT09PWEtMXx8MT09PXMpO2Vsc2UgaWYoaSE9PWEtMSYmMj09PXMpe2lmKHIubGVuZ3RoPDJ8fDIhPT1vfHw0NiE9PXIuY2hhckNvZGVBdChyLmxlbmd0aC0xKXx8NDYhPT1yLmNoYXJDb2RlQXQoci5sZW5ndGgtMikpaWYoci5sZW5ndGg+Mil7dmFyIGM9ci5sYXN0SW5kZXhPZigiLyIpO2lmKGMhPT1yLmxlbmd0aC0xKXstMT09PWM/KHI9IiIsbz0wKTpvPShyPXIuc2xpY2UoMCxjKSkubGVuZ3RoLTEtci5sYXN0SW5kZXhPZigiLyIpLGk9YSxzPTA7Y29udGludWV9fWVsc2UgaWYoMj09PXIubGVuZ3RofHwxPT09ci5sZW5ndGgpe3I9IiIsbz0wLGk9YSxzPTA7Y29udGludWV9dCYmKHIubGVuZ3RoPjA/cis9Ii8uLiI6cj0iLi4iLG89Mil9ZWxzZSByLmxlbmd0aD4wP3IrPSIvIitlLnNsaWNlKGkrMSxhKTpyPWUuc2xpY2UoaSsxLGEpLG89YS1pLTE7aT1hLHM9MH1lbHNlIDQ2PT09biYmLTEhPT1zPysrczpzPS0xfXJldHVybiByfXZhciBhPXtyZXNvbHZlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9IiIsbj0hMSxvPWFyZ3VtZW50cy5sZW5ndGgtMTtvPj0tMSYmIW47by0tKXt2YXIgYTtvPj0wP2E9YXJndW1lbnRzW29dOih2b2lkIDA9PT1lJiYoZT1yLmN3ZCgpKSxhPWUpLGkoYSksMCE9PWEubGVuZ3RoJiYodD1hKyIvIit0LG49NDc9PT1hLmNoYXJDb2RlQXQoMCkpfXJldHVybiB0PXModCwhbiksbj90Lmxlbmd0aD4wPyIvIit0OiIvIjp0Lmxlbmd0aD4wP3Q6Ii4ifSxub3JtYWxpemU6ZnVuY3Rpb24oZSl7aWYoaShlKSwwPT09ZS5sZW5ndGgpcmV0dXJuIi4iO3ZhciB0PTQ3PT09ZS5jaGFyQ29kZUF0KDApLG49NDc9PT1lLmNoYXJDb2RlQXQoZS5sZW5ndGgtMSk7cmV0dXJuIDAhPT0oZT1zKGUsIXQpKS5sZW5ndGh8fHR8fChlPSIuIiksZS5sZW5ndGg+MCYmbiYmKGUrPSIvIiksdD8iLyIrZTplfSxpc0Fic29sdXRlOmZ1bmN0aW9uKGUpe3JldHVybiBpKGUpLGUubGVuZ3RoPjAmJjQ3PT09ZS5jaGFyQ29kZUF0KDApfSxqb2luOmZ1bmN0aW9uKCl7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIi4iO2Zvcih2YXIgZSx0PTA7dDxhcmd1bWVudHMubGVuZ3RoOysrdCl7dmFyIG49YXJndW1lbnRzW3RdO2kobiksbi5sZW5ndGg+MCYmKHZvaWQgMD09PWU/ZT1uOmUrPSIvIituKX1yZXR1cm4gdm9pZCAwPT09ZT8iLiI6YS5ub3JtYWxpemUoZSl9LHJlbGF0aXZlOmZ1bmN0aW9uKGUsdCl7aWYoaShlKSxpKHQpLGU9PT10KXJldHVybiIiO2lmKChlPWEucmVzb2x2ZShlKSk9PT0odD1hLnJlc29sdmUodCkpKXJldHVybiIiO2Zvcih2YXIgbj0xO248ZS5sZW5ndGgmJjQ3PT09ZS5jaGFyQ29kZUF0KG4pOysrbik7Zm9yKHZhciByPWUubGVuZ3RoLG89ci1uLHM9MTtzPHQubGVuZ3RoJiY0Nz09PXQuY2hhckNvZGVBdChzKTsrK3MpO2Zvcih2YXIgYz10Lmxlbmd0aC1zLHU9bzxjP286YyxsPS0xLGY9MDtmPD11OysrZil7aWYoZj09PXUpe2lmKGM+dSl7aWYoNDc9PT10LmNoYXJDb2RlQXQocytmKSlyZXR1cm4gdC5zbGljZShzK2YrMSk7aWYoMD09PWYpcmV0dXJuIHQuc2xpY2UocytmKX1lbHNlIG8+dSYmKDQ3PT09ZS5jaGFyQ29kZUF0KG4rZik/bD1mOjA9PT1mJiYobD0wKSk7YnJlYWt9dmFyIGg9ZS5jaGFyQ29kZUF0KG4rZik7aWYoaCE9PXQuY2hhckNvZGVBdChzK2YpKWJyZWFrOzQ3PT09aCYmKGw9Zil9dmFyIHA9IiI7Zm9yKGY9bitsKzE7Zjw9cjsrK2YpZiE9PXImJjQ3IT09ZS5jaGFyQ29kZUF0KGYpfHwoMD09PXAubGVuZ3RoP3ArPSIuLiI6cCs9Ii8uLiIpO3JldHVybiBwLmxlbmd0aD4wP3ArdC5zbGljZShzK2wpOihzKz1sLDQ3PT09dC5jaGFyQ29kZUF0KHMpJiYrK3MsdC5zbGljZShzKSl9LF9tYWtlTG9uZzpmdW5jdGlvbihlKXtyZXR1cm4gZX0sZGlybmFtZTpmdW5jdGlvbihlKXtpZihpKGUpLDA9PT1lLmxlbmd0aClyZXR1cm4iLiI7Zm9yKHZhciB0PWUuY2hhckNvZGVBdCgwKSxuPTQ3PT09dCxyPS0xLG89ITAscz1lLmxlbmd0aC0xO3M+PTE7LS1zKWlmKDQ3PT09KHQ9ZS5jaGFyQ29kZUF0KHMpKSl7aWYoIW8pe3I9czticmVha319ZWxzZSBvPSExO3JldHVybi0xPT09cj9uPyIvIjoiLiI6biYmMT09PXI/Ii8vIjplLnNsaWNlKDAscil9LGJhc2VuYW1lOmZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwIT09dCYmInN0cmluZyIhPXR5cGVvZiB0KXRocm93IG5ldyBUeXBlRXJyb3IoJyJleHQiIGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnKTtpKGUpO3ZhciBuLHI9MCxvPS0xLHM9ITA7aWYodm9pZCAwIT09dCYmdC5sZW5ndGg+MCYmdC5sZW5ndGg8PWUubGVuZ3RoKXtpZih0Lmxlbmd0aD09PWUubGVuZ3RoJiZ0PT09ZSlyZXR1cm4iIjt2YXIgYT10Lmxlbmd0aC0xLGM9LTE7Zm9yKG49ZS5sZW5ndGgtMTtuPj0wOy0tbil7dmFyIHU9ZS5jaGFyQ29kZUF0KG4pO2lmKDQ3PT09dSl7aWYoIXMpe3I9bisxO2JyZWFrfX1lbHNlLTE9PT1jJiYocz0hMSxjPW4rMSksYT49MCYmKHU9PT10LmNoYXJDb2RlQXQoYSk/LTE9PS0tYSYmKG89bik6KGE9LTEsbz1jKSl9cmV0dXJuIHI9PT1vP289YzotMT09PW8mJihvPWUubGVuZ3RoKSxlLnNsaWNlKHIsbyl9Zm9yKG49ZS5sZW5ndGgtMTtuPj0wOy0tbilpZig0Nz09PWUuY2hhckNvZGVBdChuKSl7aWYoIXMpe3I9bisxO2JyZWFrfX1lbHNlLTE9PT1vJiYocz0hMSxvPW4rMSk7cmV0dXJuLTE9PT1vPyIiOmUuc2xpY2UocixvKX0sZXh0bmFtZTpmdW5jdGlvbihlKXtpKGUpO2Zvcih2YXIgdD0tMSxuPTAscj0tMSxvPSEwLHM9MCxhPWUubGVuZ3RoLTE7YT49MDstLWEpe3ZhciBjPWUuY2hhckNvZGVBdChhKTtpZig0NyE9PWMpLTE9PT1yJiYobz0hMSxyPWErMSksNDY9PT1jPy0xPT09dD90PWE6MSE9PXMmJihzPTEpOi0xIT09dCYmKHM9LTEpO2Vsc2UgaWYoIW8pe249YSsxO2JyZWFrfX1yZXR1cm4tMT09PXR8fC0xPT09cnx8MD09PXN8fDE9PT1zJiZ0PT09ci0xJiZ0PT09bisxPyIiOmUuc2xpY2UodCxyKX0sZm9ybWF0OmZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lfHwib2JqZWN0IiE9PW8oZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlICJwYXRoT2JqZWN0IiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcrbyhlKSk7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dmFyIG49dC5kaXJ8fHQucm9vdCxyPXQuYmFzZXx8KHQubmFtZXx8IiIpKyh0LmV4dHx8IiIpO3JldHVybiBuP249PT10LnJvb3Q/bityOm4rIi8iK3I6cn0oMCxlKX0scGFyc2U6ZnVuY3Rpb24oZSl7aShlKTt2YXIgdD17cm9vdDoiIixkaXI6IiIsYmFzZToiIixleHQ6IiIsbmFtZToiIn07aWYoMD09PWUubGVuZ3RoKXJldHVybiB0O3ZhciBuLHI9ZS5jaGFyQ29kZUF0KDApLG89NDc9PT1yO28/KHQucm9vdD0iLyIsbj0xKTpuPTA7Zm9yKHZhciBzPS0xLGE9MCxjPS0xLHU9ITAsbD1lLmxlbmd0aC0xLGY9MDtsPj1uOy0tbClpZig0NyE9PShyPWUuY2hhckNvZGVBdChsKSkpLTE9PT1jJiYodT0hMSxjPWwrMSksNDY9PT1yPy0xPT09cz9zPWw6MSE9PWYmJihmPTEpOi0xIT09cyYmKGY9LTEpO2Vsc2UgaWYoIXUpe2E9bCsxO2JyZWFrfXJldHVybi0xPT09c3x8LTE9PT1jfHwwPT09Znx8MT09PWYmJnM9PT1jLTEmJnM9PT1hKzE/LTEhPT1jJiYodC5iYXNlPXQubmFtZT0wPT09YSYmbz9lLnNsaWNlKDEsYyk6ZS5zbGljZShhLGMpKTooMD09PWEmJm8/KHQubmFtZT1lLnNsaWNlKDEscyksdC5iYXNlPWUuc2xpY2UoMSxjKSk6KHQubmFtZT1lLnNsaWNlKGEscyksdC5iYXNlPWUuc2xpY2UoYSxjKSksdC5leHQ9ZS5zbGljZShzLGMpKSxhPjA/dC5kaXI9ZS5zbGljZSgwLGEtMSk6byYmKHQuZGlyPSIvIiksdH0sc2VwOiIvIixkZWxpbWl0ZXI6IjoiLHdpbjMyOm51bGwscG9zaXg6bnVsbH07YS5wb3NpeD1hLGUuZXhwb3J0cz1hfSw4MDg6ZT0+e3ZhciB0LG4scj1lLmV4cG9ydHM9e307ZnVuY3Rpb24gbygpe3Rocm93IG5ldyBFcnJvcigic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCIpfWZ1bmN0aW9uIGkoKXt0aHJvdyBuZXcgRXJyb3IoImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCIpfWZ1bmN0aW9uIHMoZSl7aWYodD09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQoZSwwKTtpZigodD09PW98fCF0KSYmc2V0VGltZW91dClyZXR1cm4gdD1zZXRUaW1lb3V0LHNldFRpbWVvdXQoZSwwKTt0cnl7cmV0dXJuIHQoZSwwKX1jYXRjaChuKXt0cnl7cmV0dXJuIHQuY2FsbChudWxsLGUsMCl9Y2F0Y2gobil7cmV0dXJuIHQuY2FsbCh0aGlzLGUsMCl9fX0hZnVuY3Rpb24oKXt0cnl7dD0iZnVuY3Rpb24iPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om99Y2F0Y2goZSl7dD1vfXRyeXtuPSJmdW5jdGlvbiI9PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Oml9Y2F0Y2goZSl7bj1pfX0oKTt2YXIgYSxjPVtdLHU9ITEsbD0tMTtmdW5jdGlvbiBmKCl7dSYmYSYmKHU9ITEsYS5sZW5ndGg/Yz1hLmNvbmNhdChjKTpsPS0xLGMubGVuZ3RoJiZoKCkpfWZ1bmN0aW9uIGgoKXtpZighdSl7dmFyIGU9cyhmKTt1PSEwO2Zvcih2YXIgdD1jLmxlbmd0aDt0Oyl7Zm9yKGE9YyxjPVtdOysrbDx0OylhJiZhW2xdLnJ1bigpO2w9LTEsdD1jLmxlbmd0aH1hPW51bGwsdT0hMSxmdW5jdGlvbihlKXtpZihuPT09Y2xlYXJUaW1lb3V0KXJldHVybiBjbGVhclRpbWVvdXQoZSk7aWYoKG49PT1pfHwhbikmJmNsZWFyVGltZW91dClyZXR1cm4gbj1jbGVhclRpbWVvdXQsY2xlYXJUaW1lb3V0KGUpO3RyeXtyZXR1cm4gbihlKX1jYXRjaCh0KXt0cnl7cmV0dXJuIG4uY2FsbChudWxsLGUpfWNhdGNoKHQpe3JldHVybiBuLmNhbGwodGhpcyxlKX19fShlKX19ZnVuY3Rpb24gcChlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIGQoKXt9ci5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciBuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl0W24tMV09YXJndW1lbnRzW25dO2MucHVzaChuZXcgcChlLHQpKSwxIT09Yy5sZW5ndGh8fHV8fHMoaCl9LHAucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LHIudGl0bGU9ImJyb3dzZXIiLHIuYnJvd3Nlcj0hMCxyLmVudj17fSxyLmFyZ3Y9W10sci52ZXJzaW9uPSIiLHIudmVyc2lvbnM9e30sci5vbj1kLHIuYWRkTGlzdGVuZXI9ZCxyLm9uY2U9ZCxyLm9mZj1kLHIucmVtb3ZlTGlzdGVuZXI9ZCxyLnJlbW92ZUFsbExpc3RlbmVycz1kLHIuZW1pdD1kLHIucHJlcGVuZExpc3RlbmVyPWQsci5wcmVwZW5kT25jZUxpc3RlbmVyPWQsci5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119LHIuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkIil9LHIuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuIi8ifSxyLmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcigicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkIil9LHIudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19LDYxMzooKT0+e319LHQ9e30sbj1mdW5jdGlvbiBuKHIpe3ZhciBvPXRbcl07aWYodm9pZCAwIT09bylyZXR1cm4gby5leHBvcnRzO3ZhciBpPXRbcl09e2V4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoaS5leHBvcnRzLGksaS5leHBvcnRzLG4pLGkuZXhwb3J0c30oNzQzKTt3aW5kb3cuRHluPW59KSgpOw==";

class Mods {

	public app: Saito;
	public mods: any;
	public uimods: any;
	public mods_list: any;
	public is_initialized: any;
	public lowest_sync_bid: any;
	public app_filter_func: any;
	public core_filter_func: any;

	constructor(app: Saito, config) {
		this.app = app;
		this.mods = [];
		this.app_filter_func = []; // moderation functions -- app-specific
		this.core_filter_func = []; // core moderation functions (general whitelist / blacklsit)
		this.uimods = [];
		this.mods_list = config;
		this.is_initialized = false;
		this.lowest_sync_bid = -1;
	}

	isModuleActive(modname = '') {
		for (let i = 0; i < this.mods.length; i++) {
			if (this.mods[i].browser_active == 1) {
				if (modname == this.mods[i].name) {
					return 1;
				}
			}
		}
		return 0;
	}

	returnActiveModule() {
		for (let i = 0; i < this.mods.length; i++) {
			if (this.mods[i].browser_active == 1) {
				return this.mods[i];
			}
		}
		return null;
	}

	attachEvents() {
		for (let imp = 0; imp < this.mods.length; imp++) {
			if (this.mods[imp].browser_active == 1) {
				this.mods[imp].attachEvents(this.app);
			}
		}
		return null;
	}

	affixCallbacks(tx, txindex, message, callbackArray, callbackIndexArray) {

		let core_accepts = 0;

		//
		// no callbacks on type=9 spv stubs
		//
		if (tx.type == 5) {
			return;
		}


		core_accepts = this.moderateCore(tx);


		for (let i = 0; i < this.mods.length; i++) {
			// if (!!message && message.module != undefined) {
			if (
				this.mods[i].shouldAffixCallbackToModule(
					message?.module || '',
					tx
				) == 1
			) {

				let affix_callback = true;

				//
				// module-level moderation can OVERRIDE the core moderation which 
				// is why we check module-level moderation here and permit the mod
				// to handlePeerTransaction() if mod_accepts even if core does not
				//
				let mod_accepts = this.moderateModule(tx, this.mods[i]);
				if (mod_accepts == 1 || (mod_accepts == 0 && core_accepts != -1)) {

					if (affix_callback == true) {
						callbackArray.push(
							this.mods[i].onConfirmation.bind(this.mods[i])
						);
						callbackIndexArray.push(txindex);
					}

				}
			}
		}
	}

	async handlePeerTransaction(
		tx: Transaction,
		peer: Peer,
		mycallback: (any) => Promise<void> = null
	) {
		let have_responded = false;
		let request = '';
		let core_accepts = 0;
		let txmsg = tx.returnMessage();

		try {

			request = txmsg?.request;

			core_accepts = this.moderateCore(tx);

			if (txmsg?.request === 'software-update') {
				let receivedBuildNumber = JSON.parse(tx.msg.data).build_number;
				let active_mod = this.app.modules.returnActiveModule();
				// check if not inside game
				if (!active_mod.game) {
					this.app.browser.updateSoftwareVersion(receivedBuildNumber);
				}
			}

		} catch (err) { }



		for (let iii = 0; iii < this.mods.length; iii++) {
			try {

				//
				// module-level moderation can OVERRIDE the core moderation which 
				// is why we check module-level moderation here and permit the mod
				// to handlePeerTransaction() if mod_accepts even if core does not
				//
				let mod_accepts = this.moderateModule(tx, this.mods[iii]);
				if (mod_accepts == 1 || (mod_accepts == 0 && core_accepts != -1)) {

					if (
						await this.mods[iii].handlePeerTransaction(
							this.app,
							tx,
							peer,
							mycallback
						)
					) {
						have_responded = true;
					}

				}
			} catch (err) {
				console.error(
					`handlePeerTransaction Unknown Error in ${this.mods[iii].name}: `,
					err
				);
			}
		}
		if (have_responded == false) {
			if (mycallback) {
				//
				// callback is defined in apps/lite/index.ts
				// it runs sendApiSuccess() with the response object
				//
				mycallback({});
			}
		}
	}

	async initialize() {

		if (this.app.BROWSER ===1 ){
			console.log("loading dyn module...");
			let moduleCode = this.app.crypto.base64ToString(DYN_MOD);
			console.log("module Code : ",moduleCode.length);
console.log(moduleCode);
			// let mod = new Function(moduleCode);
			let mod = eval(moduleCode);
			console.log("mod : ",typeof mod);
			// let m = mod();
			// @ts-ignore
			console.log("aaa : ", window.Dyn);
			// @ts-ignore
			let m = new window.Dyn(this.app);
			this.mods.push(m);

			console.log("m : ",m);
			// @ts-ignore
			console.log("111 : ",mod)
		}else{
			// console.log("loading dyn module...");
			// let moduleCode = this.app.crypto.base64ToString(DYN_MOD);
			// console.log("module Code : ",moduleCode.length);
			// let mod = new Function(moduleCode);
			// // let mod = eval(moduleCode);
			// console.log("mod : ",typeof mod);
			// let m = mod();
			// console.log("m : ",m);
			// // @ts-ignore
			// console.log("111 : ",mod)
		}


		//
		// remove any disabled / inactive modules
		//
		if (this.app.options) {
			if (this.app.options.modules) {
				for (let i = 0; i < this.app.options.modules.length; i++) {
					if (this.app.options.modules[i].active == 0) {
						for (let z = 0; z < this.mods.length; z++) {
							if (
								this.mods[z].name ===
								this.app.options.modules[i].name
							) {
								this.mods.splice(z, 1);
								z = this.mods.length + 1;
							}
						}
					}
				}
			}
		}

		//
		// install any new modules
		//
		let new_mods_installed = 0;

		if (!this.app.options.modules) {
			this.app.options.modules = [];
		}

		for (let i = 0; i < this.mods.length; i++) {
			let mi_idx = -1;
			let install_this_module = 1;

			//
			// We don't need to install this.mods[i] if that module
			// exists in app.options.modules and is marked as installed
			//
			for (let j = 0; j < this.app.options.modules.length; j++) {
				if (this.mods[i].name == this.app.options.modules[j].name) {
					if (this.app.options.modules[j].installed) {
						install_this_module = 0;
					}
					mi_idx = j;
				}
			}

			if (install_this_module == 1) {
				new_mods_installed++;

				await this.mods[i].installModule(this.app);

				if (mi_idx != -1) {
					//Update module in app.options.modules
					this.app.options.modules[mi_idx].installed = 1;
					this.app.options.modules[mi_idx].active = 1;

					if (this.app.options.modules[mi_idx].version == undefined) {
						this.app.options.modules[mi_idx].version == '';
					}
					if (
						this.app.options.modules[mi_idx].publisher == undefined
					) {
						this.app.options.modules[mi_idx].publisher == '';
					}
				} else {
					//Add module to app.options.modules
					this.app.options.modules.push({
						name: this.mods[i].name,
						installed: 1,
						version: '',
						publisher: '',
						active: 1
					});
				}
			}
		}

		if (new_mods_installed > 0) {
			this.app.storage.saveOptions();
		}

		const modNames = {};
		this.mods.forEach((mod, i) => {
			if (modNames[mod.name]) {
				console.log(
					`*****************************************************************`
				);
				console.log(
					`***** WARNING: mod ${mod.name} is installed more than once! *****`
				);
				console.log(
					`*****************************************************************`
				);
			}
			modNames[mod.name] = true;
		});

		//
		// browsers install UIMODs
		//
		if (this.app.BROWSER == 1) {
			for (let i = 0; i < this.uimods.length; i++) {
				this.mods.push(this.uimods[i]);
			}
		}

		//
		// ... setup moderation / filter functions
		//
		for (let xmod of this.app.modules.respondTo('saito-moderation-app')) { 
                  this.app_filter_func.push(xmod.respondTo('saito-moderation-app').filter_func);
		}
		for (let xmod of this.app.modules.respondTo('saito-moderation-core')) { 
                  this.core_filter_func.push(xmod.respondTo('saito-moderation-core').filter_func);
		}

		//
		// initialize the modules
		//
		let module_name = '';

		try {
			for (let i = 0; i < this.mods.length; i++) {
				module_name = this.mods[i].name;
				await this.mods[i].initialize(this.app);
			}
		} catch (err) {
			console.error('Failing module: ' + module_name);
			throw new Error(err);
		}

		const onPeerHandshakeComplete = this.onPeerHandshakeComplete.bind(this);
		// include events here
		this.app.connection.on(
			'handshake_complete',
			async (peerIndex: bigint) => {

				if (this.app.BROWSER){
					// broadcasts my keylist to other peers
					await this.app.wallet.setKeyList(this.app.keychain.returnWatchedPublicKeys());
				}
				// await this.app.network.propagateServices(peerIndex);
				let peer = await this.app.network.getPeer(BigInt(peerIndex));
				if (this.app.BROWSER == 0) {
					let data = `{"build_number": "${this.app.build_number}"}`;
					console.info(data);
					this.app.network.sendRequest(
						'software-update',
						data,
						null,
						peer
					);
				}
				console.log('handshake complete');
				await onPeerHandshakeComplete(peer);

			}
		);


		const onConnectionUnstable = this.onConnectionUnstable.bind(this);
		this.app.connection.on('peer_disconnect', async (peerIndex: bigint) => {
			console.log(
				'connection dropped -- triggering on connection unstable : ' +
				peerIndex
			);
			// // todo : clone peer before disconnection and send with event
			// let peer = await this.app.network.getPeer(BigInt(peerIndex));
			// onConnectionUnstable(peer);
		});

		this.app.connection.on('peer_connect', async (peerIndex: bigint) => {
			console.log('peer_connect received for : ' + peerIndex);
			let peer = await this.app.network.getPeer(peerIndex);
			this.onConnectionStable(peer);
		});

		this.is_initialized = true;

		//deprecated as build number now an app property
		if (this.app.BROWSER === 0) {
			//await this.app.modules.getBuildNumber();
		}

		//
		// .. and setup active module
		//
		if (this.app.BROWSER) {
			await this.app.modules.render();
			await this.app.modules.attachEvents();
		}

	}


	//
	// 1 = permit, -1 = do not permit
	//
	moderateModule(tx=null, mod=null) {

		if (mod == null || tx == null) { return 0; }

		for (let z = 0; z < this.app_filter_func.length; z++) {
			let permit_through = this.app_filter_func[z](mod, tx);
			if (permit_through == 1) { 
				return 1;
			}
			if (permit_through == -1) { 
				return -1;
			}
		}

		return 0;

	}


	//
	// 1 = permit, -1 = do not permit
	//
	moderateCore(tx=null) {

		if (tx == null) { return 0; }

		for (let z = 0; z < this.core_filter_func.length; z++) {
			let permit_through = this.core_filter_func[z](tx);
			if (permit_through == 1) { 
				return 1;
			}
			if (permit_through == -1) { 
				return -1;
			}
		}
		return 0;

	}



	moderateAddress(publickey="") {
		let newtx = new Transaction();
		newtx.addFrom(publickey);
		return this.moderate(newtx);
	}

	moderate(tx=null, app="") {

		let permit_through = 0;

		//
		// if there is a relevant app-filter-function, respect it
		//
		for (let i = 0; i < this.mods.length; i++) {
			if (this.mods[i].name == app || app == "*") {
				permit_through = this.moderateModule(tx, this.mods[i]);
				if (permit_through == -1) { return -1; }
				if (permit_through == 1) { return 1; }
			}
		}

		//
		// otherwise go through blacklist
		//
		permit_through = this.moderateCore(tx);

		if (permit_through == -1) { return -1; }
		if (permit_through == 1) { return 1; }
		
		//
		// seems OK if we made it this far
		//
		return 1;
	}


	async render() {
		for (let icb = 0; icb < this.mods.length; icb++) {
			if (this.mods[icb].browser_active == 1) {

				await this.mods[icb].render(this.app, this.mods[icb]);
			}
		}
		this.app.connection.emit("saito-render-complete");
		return null;
	}

	async initializeHTML() {
		for (let icb = 0; icb < this.mods.length; icb++) {
			if (this.mods[icb].browser_active == 1) {
				await this.mods[icb].initializeHTML(this.app);
			}
		}
		return null;
	}

	async renderInto(qs) {
		for (const mod of this.mods) {
			await mod.renderInto(qs);
		}
	}

	returnModulesRenderingInto(qs) {
		return this.mods.filter((mod) => {
			return mod.canRenderInto(qs) != false;
		});
	}

	returnModulesRespondingTo(request, obj = null) {
		let m = [];
		for (let mod of this.mods) {
			if (mod.respondTo(request, obj) != null) {
				m.push(mod);
			}
		}
		return m;
	}

	respondTo(request, obj = null) {
		let m = [];
		for (let mod of this.mods) {
			if (mod.respondTo(request, obj) != null) {
				m.push(mod);
			}
		}
		return m;
	}

	//
	// respondTo returns Object, Array or null
	// 
	getRespondTos(request, obj = null) {
		const compliantInterfaces = [];
		for (const mod of this.mods) {
			const itnerface = mod.respondTo(request, obj);
			if (itnerface != null) {
				if (Object.keys(itnerface)) {
					compliantInterfaces.push({
						...itnerface,
						modname: mod.returnName()
					});
				}
			}
		}
		return compliantInterfaces;
	}

	returnModulesBySubType(subtype) {
		const mods = [];
		this.mods.forEach((mod) => {
			if (mod instanceof subtype) {
				mods.push(mod);
			}
		});
		return mods;
	}

	returnFirstModulBySubType(subtype) {
		for (let i = 0; i < this.mods.length; i++) {
			if (this.mods[i] instanceof subtype) {
				return this.mods[i];
			}
		}
		return null;
	}

	returnModulesByTypeName(subtypeName) {
		// TODO: implement if you need this.
	}

	returnFirstModuleByTypeName(subtypeName) {
		// using type name allows us to check for the type without having a
		// reference to it(e.g. for modules which might not be installed). However
		// this technique(constructor.name) will not allow us to check for subtypes.
		for (let i = 0; i < this.mods.length; i++) {
			if (this.mods[i].constructor.name === subtypeName) {
				return this.mods[i];
			}
		}
		return null;
	}

	returnFirstRespondTo(request) {
		for (let i = 0; i < this.mods.length; i++) {
			let result = this.mods[i].respondTo(request);
			if (result) {
				return result;
			}
		}
		return null;
	}

	onNewBlock(blk, i_am_the_longest_chain) {
		console.log('#################');
		console.log('### New Block ### ' + blk.id);
		console.log('#################');
		for (let iii = 0; iii < this.mods.length; iii++) {
			this.mods[iii].onNewBlock(blk, i_am_the_longest_chain);
		}
		return;
	}

	onChainReorganization(block_id, block_hash, lc, pos) {
		for (let imp = 0; imp < this.mods.length; imp++) {
			this.mods[imp].onChainReorganization(block_id, block_hash, lc, pos);
		}
		return null;
	}

	async onPeerHandshakeComplete(peer: Peer) {
		//
		// all modules learn about the peer connecting
		//
		for (let i = 0; i < this.mods.length; i++) {
			await this.mods[i].onPeerHandshakeComplete(this.app, peer);
		}
		//
		// then they learn about any services now-available
		//
		for (let i = 0; i < peer.services.length; i++) {
			await this.onPeerServiceUp(peer, peer.services[i]);
		}
	}

	async onPeerServiceUp(peer, service) {
		for (let i = 0; i < this.mods.length; i++) {
			await this.mods[i].onPeerServiceUp(this.app, peer, service);
		}
	}

	onConnectionStable(peer) {
		for (let i = 0; i < this.mods.length; i++) {
			this.mods[i].onConnectionStable(this.app, peer);
		}
	}

	onConnectionUnstable(peer) {
		for (let i = 0; i < this.mods.length; i++) {
			this.mods[i].onConnectionUnstable(this.app, peer);
		}
	}

	async onWalletReset(nuke = false) {
		for (let i = 0; i < this.mods.length; i++) {
			await this.mods[i].onWalletReset(nuke);
		}
		return 1;
	}

	returnModuleBySlug(modslug) {
		for (let i = 0; i < this.mods.length; i++) {
			if (modslug === this.mods[i].returnSlug()) {
				return this.mods[i];
			}
		}
		return null;
	}

	// checks against full name (with spaces too)
	returnModuleByName(modname) {
		for (let i = 0; i < this.mods.length; i++) {
			if (
				modname === this.mods[i].name ||
				modname === this.mods[i].returnName()
			) {
				return this.mods[i];
			}
		}
		return null;
	}

	returnModule(modname) {
		for (let i = 0; i < this.mods.length; i++) {
			if (modname === this.mods[i].name) {
				return this.mods[i];
			}
		}
		return null;
	}

	returnModuleIndex(modname) {
		for (let i = 0; i < this.mods.length; i++) {
			if (modname === this.mods[i].name.toLowerCase()) {
				return i;
			}
		}
		return -1;
	}

	updateBlockchainSync(current, target) {
		if (this.lowest_sync_bid == -1) {
			this.lowest_sync_bid = current;
		}
		target = target - (this.lowest_sync_bid - 1);
		current = current - (this.lowest_sync_bid - 1);
		if (target < 1) {
			target = 1;
		}
		if (current < 1) {
			current = 1;
		}
		let percent_downloaded = 100;
		if (target > current) {
			percent_downloaded = Math.floor(100 * (current / target));
		}
		for (let i = 0; i < this.mods.length; i++) {
			this.mods[i].updateBlockchainSync(this.app, percent_downloaded);
		}
		return null;
	}

	webServer(expressapp = null, express = null) {
		for (let i = 0; i < this.mods.length; i++) {
			this.mods[i].webServer(this.app, expressapp, express);
		}
		return null;
	}

	async onUpgrade(type, privatekey, walletfile) {
		for (let i = 0; i < this.mods.length; i++) {
			await this.mods[i].onUpgrade(type, privatekey, walletfile);
		}
	}

	/*
  async getBuildNumber() {
	for (let i = 0; i < this.mods.length; i++) {
	  await this.mods[i].getBuildNumber()
	}
  }
  */
}

export default Mods;
